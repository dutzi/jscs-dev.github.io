window.__jscsData = {"githubOrganization":"jscs-dev","githubProject":"node-jscs","twitterAccount":"jscs_dev","mailingListName":"jscs-dev","rules":[{"name":"disallowAnonymousFunctions","description":"<h1 id=\"disallowanonymousfunctions\">disallowAnonymousFunctions</h1>\n<p>Requires that a function expression be named.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowAnonymousFunctions\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">()</span></span>{\n\n};\n\n$(<span class=\"hljs-string\">'#foo'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span><span class=\"hljs-params\">()</span></span>{\n\n});\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{\n\n};\n\n$(<span class=\"hljs-string\">'#foo'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{\n\n});\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-anonymous-functions.js"},{"name":"disallowCapitalizedComments","description":"<h1 id=\"disallowcapitalizedcomments\">disallowCapitalizedComments</h1>\n<p>Requires the first alphabetical character of a comment to be lowercase.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<p><code>&quot;disallowCapitalizedComments&quot;: true</code></p>\n<p>Valid:</p>\n<pre><code>// valid\n//valid\n\n/*\n  valid\n */\n\n/**\n * valid\n */\n\n// 123 or any non-alphabetical starting character\n</code></pre><p>Invalid:</p>\n<pre><code>// Invalid\n//Invalid\n/** Invalid */\n/**\n * Invalid\n */\n</code></pre>","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-capitalized-comments.js"},{"name":"disallowCommaBeforeLineBreak","description":"<h1 id=\"disallowcommabeforelinebreak\">disallowCommaBeforeLineBreak</h1>\n<p>Disallows commas as last token on a line in lists.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<p>JSHint: <a href=\"http://www.jshint.com/docs/options/#laxcomma\"><code>laxcomma</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowCommaBeforeLineBreak\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {\n    one: <span class=\"hljs-number\">1</span>\n    , two: <span class=\"hljs-number\">2</span>\n};\n<span class=\"hljs-keyword\">var</span> y = { three: <span class=\"hljs-number\">3</span>, four: <span class=\"hljs-number\">4</span>};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {\n    one: <span class=\"hljs-number\">1</span>,\n    two: <span class=\"hljs-number\">2</span>\n};\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-comma-before-line-break.js"},{"name":"disallowCurlyBraces","description":"<h1 id=\"disallowcurlybraces\">disallowCurlyBraces</h1>\n<p>Disallows curly braces after statements.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted keywords or <code>true</code> to disallow curly braces after the following keywords:</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowCurlyBraces\"</span>: [\n    <span class=\"hljs-string\">\"if\"</span>,\n    <span class=\"hljs-string\">\"else\"</span>,\n    <span class=\"hljs-string\">\"while\"</span>,\n    <span class=\"hljs-string\">\"for\"</span>,\n    <span class=\"hljs-string\">\"do\"</span>,\n    <span class=\"hljs-string\">\"with\"</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (x) x++;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (x) {\n    x++;\n}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-curly-braces.js"},{"name":"disallowDanglingUnderscores","description":"<h1 id=\"disallowdanglingunderscores\">disallowDanglingUnderscores</h1>\n<p>Disallows identifiers that start or end in <code>_</code>. Some popular identifiers are automatically listed as exceptions:</p>\n<ul>\n<li><code>__proto__</code> (javascript)</li>\n<li><code>_</code> (underscore.js)</li>\n<li><code>__filename</code> (node.js global)</li>\n<li><code>__dirname</code> (node.js global)</li>\n<li><code>super_</code> (node.js, used by\n<a href=\"http://nodejs.org/docs/latest/api/util.html#util_util_inherits_constructor_superconstructor\"><code>util.inherits</code></a>)</li>\n</ul>\n<p>Types: <code>Boolean</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code></li>\n<li><code>Object</code>:<ul>\n<li><code>allExcept</code>: array of quoted identifiers</li>\n</ul>\n</li>\n</ul>\n<p>JSHint: <a href=\"http://www.jshint.com/docs/options/#nomen\"><code>nomen</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowDanglingUnderscores\"</span>: { <span class=\"hljs-string\">\"allExcept\"</span>: [<span class=\"hljs-string\">\"_exception\"</span>] }\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> o = obj.__proto__;\n<span class=\"hljs-keyword\">var</span> y = _.extend;\n<span class=\"hljs-keyword\">var</span> z = __dirname;\n<span class=\"hljs-keyword\">var</span> w = __filename;\n<span class=\"hljs-keyword\">var</span> x_y = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> v = _exception;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> _x = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> x_ = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> x_y_ = <span class=\"hljs-number\">1</span>;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-dangling-underscores.js"},{"name":"disallowEmptyBlocks","description":"<h1 id=\"disallowemptyblocks\">disallowEmptyBlocks</h1>\n<p>Disallows empty blocks (except for catch blocks).</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<p>JSHint: <a href=\"http://jshint.com/docs/options/#noempty\"><code>noempty</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowEmptyBlocks\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> ( a == b ) { c = d; }\n<span class=\"hljs-keyword\">try</span> { a = b; } <span class=\"hljs-keyword\">catch</span>( e ){}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> ( a == b ) { } <span class=\"hljs-keyword\">else</span> { c = d; }\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-empty-blocks.js"},{"name":"disallowFunctionDeclarations","description":"<h1 id=\"disallowfunctiondeclarations\">disallowFunctionDeclarations</h1>\n<p>Disallows function declarations.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowFunctionDeclarations\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> expressed = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n\n};\n\n<span class=\"hljs-keyword\">var</span> expressed = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">deeply</span><span class=\"hljs-params\">()</span> </span>{\n\n};\n\n$(<span class=\"hljs-string\">'#foo'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span><span class=\"hljs-params\">()</span> </span>{\n\n};)\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">stated</span><span class=\"hljs-params\">()</span> </span>{\n\n}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-function-declarations.js"},{"name":"disallowIdentifierNames","description":"<h1 id=\"disallowidentifiernames\">disallowIdentifierNames</h1>\n<p>Disallows a specified set of identifier names.</p>\n<p>Type: <code>Array</code></p>\n<p>Values: Array of strings, which should be disallowed as identifier names</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowIdentifierNames\"</span>: [<span class=\"hljs-string\">'temp'</span>, <span class=\"hljs-string\">'foo'</span>]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> good = <span class=\"hljs-number\">1</span>;\nobject[<span class=\"hljs-string\">'fine'</span>] = <span class=\"hljs-number\">2</span>;\nobject.fine = <span class=\"hljs-number\">3</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> temp = <span class=\"hljs-number\">1</span>;\nobject[<span class=\"hljs-string\">'foo'</span>] = <span class=\"hljs-number\">2</span>;\nobject.foo = <span class=\"hljs-number\">3</span>;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-identifier-names.js"},{"name":"disallowImplicitTypeConversion","description":"<h1 id=\"disallowimplicittypeconversion\">disallowImplicitTypeConversion</h1>\n<p>Disallows implicit type conversion.</p>\n<p>Type: <code>Array</code></p>\n<p>Values: Array of quoted types</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowImplicitTypeConversion\"</span>: [<span class=\"hljs-string\">\"numeric\"</span>, <span class=\"hljs-string\">\"boolean\"</span>, <span class=\"hljs-string\">\"binary\"</span>, <span class=\"hljs-string\">\"string\"</span>]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">x = <span class=\"hljs-built_in\">Boolean</span>(y);\nx = <span class=\"hljs-built_in\">Number</span>(y);\nx = <span class=\"hljs-built_in\">String</span>(y);\nx = s.indexOf(<span class=\"hljs-string\">'.'</span>) !== -<span class=\"hljs-number\">1</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">x = !!y;\nx = +y;\nx = <span class=\"hljs-string\">''</span> + y;\nx = ~s.indexOf(<span class=\"hljs-string\">'.'</span>);\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-implicit-type-conversion.js"},{"name":"disallowKeywordsInComments","description":"<h1 id=\"disallowkeywordsincomments\">disallowKeywordsInComments</h1>\n<p>Disallows keywords in your comments, such as TODO or FIXME</p>\n<p>Types: <code>Boolean</code>, <code>String</code> or <code>Array</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code></li>\n<li><code>&#39;\\b(word1|word2)\\b&#39;</code></li>\n<li><code>[&#39;word1&#39;, &#39;word2&#39;]</code></li>\n</ul>\n<h4 id=\"examples\">Examples</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowKeywordsInComments\"</span>: <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-string\">\"disallowKeywordsInComments\"</span>: <span class=\"hljs-string\">\"\\\\b(word1|word2)\\\\b\"</span>\n<span class=\"hljs-string\">\"disallowKeywordsInComments\"</span>: [<span class=\"hljs-string\">\"word1\"</span>, <span class=\"hljs-string\">\"word2\"</span>]\n</code></pre>\n<h4 id=\"invalid-\">Invalid:</h4>\n<pre><code>// ToDo\n//TODO\n/** fixme */\n/**\n * FIXME\n */\n</code></pre>","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-keywords-in-comments.js"},{"name":"disallowKeywordsOnNewLine","description":"<h1 id=\"disallowkeywordsonnewline\">disallowKeywordsOnNewLine</h1>\n<p>Disallows placing keywords on a new line.</p>\n<p>Type: <code>Array</code></p>\n<p>Values: Array of quoted keywords</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowKeywordsOnNewLine\"</span>: [<span class=\"hljs-string\">\"else\"</span>]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (x &lt; <span class=\"hljs-number\">0</span>) {\n    x++;\n} <span class=\"hljs-keyword\">else</span> {\n    x--;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (x &lt; <span class=\"hljs-number\">0</span>) {\n    x++;\n}\n<span class=\"hljs-keyword\">else</span> {\n    x--;\n}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-keywords-on-new-line.js"},{"name":"disallowKeywords","description":"<h1 id=\"disallowkeywords\">disallowKeywords</h1>\n<p>Disallows usage of specified keywords.</p>\n<p>Type: <code>Array</code></p>\n<p>Values: Array of quoted keywords</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowKeywords\"</span>: [<span class=\"hljs-string\">\"with\"</span>]\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">with</span> (x) {\n    prop++;\n}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-keywords.js"},{"name":"disallowLeftStickedOperators","description":"<h1 id=\"disallowleftstickedoperators\">disallowLeftStickedOperators</h1>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-left-sticked-operators.js"},{"name":"disallowMixedSpacesAndTabs","description":"<h1 id=\"disallowmixedspacesandtabs\">disallowMixedSpacesAndTabs</h1>\n<p>Requires lines to not contain both spaces and tabs consecutively,\nor spaces after tabs only for alignment if &quot;smart&quot;</p>\n<p>Types: <code>Boolean</code> or <code>String</code></p>\n<p>Values: <code>true</code> or <code>&quot;smart&quot;</code></p>\n<p>JSHint: <a href=\"http://www.jshint.com/docs/options/#smarttabs\"><code>smarttabs</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowMixedSpacesAndTabs\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid-example-for-mode-true-\">Valid example for mode <code>true</code></h5>\n<pre><code class=\"lang-js\">\\tvar foo = <span class=\"hljs-string\">\"blah blah\"</span>;\n\\s\\s\\s\\svar foo = <span class=\"hljs-string\">\"blah blah\"</span>;\n\\t<span class=\"hljs-comment\">/**\n\\t\\s*\n\\t\\s*/</span> <span class=\"hljs-comment\">//a single space to align the star in a multi-line comment is allowed</span>\n</code></pre>\n<h5 id=\"invalid-example-for-mode-true-\">Invalid example for mode <code>true</code></h5>\n<pre><code class=\"lang-js\">\\t\\svar foo = <span class=\"hljs-string\">\"blah blah\"</span>;\n\\s\\tsvar foo = <span class=\"hljs-string\">\"blah blah\"</span>;\n</code></pre>\n<h5 id=\"valid-example-for-mode-smart-\">Valid example for mode <code>&quot;smart&quot;</code></h5>\n<pre><code class=\"lang-js\">\\tvar foo = <span class=\"hljs-string\">\"blah blah\"</span>;\n\\t\\svar foo = <span class=\"hljs-string\">\"blah blah\"</span>;\n\\s\\s\\s\\svar foo = <span class=\"hljs-string\">\"blah blah\"</span>;\n\\t<span class=\"hljs-comment\">/**\n\\t\\s*\n\\t\\s*/</span> <span class=\"hljs-comment\">//a single space to align the star in a multi-line comment is allowed</span>\n</code></pre>\n<h5 id=\"invalid-example-for-mode-smart-\">Invalid example for mode <code>&quot;smart&quot;</code></h5>\n<pre><code class=\"lang-js\">\\s\\tsvar foo = <span class=\"hljs-string\">\"blah blah\"</span>;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-mixed-spaces-and-tabs.js"},{"name":"disallowMultipleLineBreaks","description":"<h1 id=\"disallowmultiplelinebreaks\">disallowMultipleLineBreaks</h1>\n<p>Disallows multiple blank lines in a row.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowMultipleLineBreaks\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n\nx++;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n\n\nx++;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-multiple-line-breaks.js"},{"name":"disallowMultipleLineStrings","description":"<h1 id=\"disallowmultiplelinestrings\">disallowMultipleLineStrings</h1>\n<p>Disallows strings that span multiple lines without using concatenation.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<p>JSHint: <a href=\"http://www.jshint.com/docs/options/#multistr\"><code>multistr</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowMultipleLineStrings\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">\"multi\"</span> +\n        <span class=\"hljs-string\">\"line\"</span>;\n<span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-string\">\"single line\"</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">\"multi \\\n        line\"</span>;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-multiple-line-strings.js"},{"name":"disallowMultipleSpaces","description":"<h1 id=\"disallowmultiplespaces\">disallowMultipleSpaces</h1>\n<p>Disallows multiple indentation characters (tabs or spaces) between identifiers, keywords, and any other token</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowMultipleSpaces\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">\"hello\"</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">y</span><span class=\"hljs-params\">()</span> </span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x  = <span class=\"hljs-string\">\"hello\"</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>  <span class=\"hljs-title\">y</span><span class=\"hljs-params\">()</span> </span>{}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-multiple-spaces.js"},{"name":"disallowMultipleVarDecl","description":"<h1 id=\"disallowmultiplevardecl\">disallowMultipleVarDecl</h1>\n<p>Disallows multiple <code>var</code> declaration (except for-loop).</p>\n<p>Types: <code>Boolean</code> or <code>String</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code> disallows multiple variable declarations except within a for loop</li>\n<li><code>&#39;strict&#39;</code> disallows all multiple variable declarations</li>\n<li><code>&#39;exceptUndefined&#39;</code> allows declarations where all variables are not defined</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowMultipleVarDecl\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid-for-true-\">Valid for <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>, j = arr.length; i &lt; j; i++) {}\n</code></pre>\n<h5 id=\"valid-for-strict-\">Valid for <code>strict</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-number\">2</span>;\n</code></pre>\n<h5 id=\"valid-for-exceptundefined-\">Valid for <code>exceptUndefined</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a, b;\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>, j = arr.length; i &lt; j; i++) {}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>,\n    y = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-keyword\">var</span> x, y = <span class=\"hljs-number\">2</span>, z;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-multiple-var-decl.js"},{"name":"disallowNamedUnassignedFunctions","description":"<h1 id=\"disallownamedunassignedfunctions\">disallowNamedUnassignedFunctions</h1>\n<p>Disallows unassigned functions to be named inline</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowNamedUnassignedFunctions\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">[].forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{});\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{};\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">y</span><span class=\"hljs-params\">()</span> </span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">[].forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">x</span><span class=\"hljs-params\">()</span> </span>{});\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-named-unassigned-functions.js"},{"name":"disallowNewlineBeforeBlockStatements","description":"<h1 id=\"disallownewlinebeforeblockstatements\">disallowNewlineBeforeBlockStatements</h1>\n<p>Disallows newline before opening curly brace of all block statements.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowNewlineBeforeBlockStatements\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">good</span><span class=\"hljs-params\">()</span></span>{\n    <span class=\"hljs-keyword\">var</span> obj = {\n        val: <span class=\"hljs-literal\">true</span>\n    };\n\n    <span class=\"hljs-keyword\">return</span> {\n        data: obj\n    };\n}\n\n<span class=\"hljs-keyword\">if</span> (cond){\n    foo();\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> e <span class=\"hljs-keyword\">in</span> elements){\n    bar(e);\n}\n\n<span class=\"hljs-keyword\">while</span> (cond){\n    foo();\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bad</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">var</span> obj =\n    {\n        val: <span class=\"hljs-literal\">true</span>\n    };\n\n    <span class=\"hljs-keyword\">return</span> {\n        data: obj\n    };\n}\n\n<span class=\"hljs-keyword\">if</span> (cond)\n{\n    foo();\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> e <span class=\"hljs-keyword\">in</span> elements)\n{\n    bar(e);\n}\n\n<span class=\"hljs-keyword\">while</span> (cond)\n{\n    foo();\n}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-newline-before-block-statements.js"},{"name":"disallowNotOperatorsInConditionals","description":"<h1 id=\"disallownotoperatorsinconditionals\">disallowNotOperatorsInConditionals</h1>\n<p>Disallows the not, not equals, and strict not equals operators in conditionals.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowNotOperatorsInConditionals\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (clause) {\n    <span class=\"hljs-comment\">// Do something really crazy</span>\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// Do something crazy</span>\n}\n\n<span class=\"hljs-keyword\">if</span> (a == <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-comment\">// Do something really crazy</span>\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// Do something crazy</span>\n}\n\n<span class=\"hljs-keyword\">var</span> a = (clause) ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (!clause) {\n    <span class=\"hljs-comment\">// Do something crazy</span>\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// Do something really crazy</span>\n}\n\n<span class=\"hljs-keyword\">if</span> (a != <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-comment\">// Do something crazy</span>\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// Do something really crazy</span>\n}\n\n<span class=\"hljs-keyword\">if</span> (a !== <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-comment\">// Do something crazy</span>\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// Do something really crazy</span>\n}\n\n<span class=\"hljs-keyword\">var</span> a = (!clause) ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">1</span>\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-not-operators-in-conditionals.js"},{"name":"disallowOperatorBeforeLineBreak","description":"<h1 id=\"disallowoperatorbeforelinebreak\">disallowOperatorBeforeLineBreak</h1>\n<p>Requires putting certain operators on the next line rather than on the current line before a line break.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of operators to apply to or <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowOperatorBeforeLineBreak\"</span>: [<span class=\"hljs-string\">\"+\"</span>, <span class=\"hljs-string\">\".\"</span>]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">$el.on( <span class=\"hljs-string\">'click'</span>, fn )\n    .appendTo( <span class=\"hljs-string\">'body'</span> );\n\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">4</span> + <span class=\"hljs-number\">5</span>\n    + <span class=\"hljs-number\">12</span> + <span class=\"hljs-number\">13</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">$el.on( <span class=\"hljs-string\">'click'</span>, fn ).\n    appendTo( <span class=\"hljs-string\">'body'</span> );\n\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">4</span> + <span class=\"hljs-number\">5</span> +\n    <span class=\"hljs-number\">12</span> + <span class=\"hljs-number\">13</span>;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-operator-before-line-break.js"},{"name":"disallowPaddingNewLinesAfterBlocks","description":"<h1 id=\"disallowpaddingnewlinesafterblocks\">disallowPaddingNewLinesAfterBlocks</h1>\n<p>Disallow a newline after blocks</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowPaddingNewLinesAfterBlocks\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">  * <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">2</span>; i++) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n        <span class=\"hljs-keyword\">continue</span>;\n    }\n    <span class=\"hljs-keyword\">var</span> obj = {\n        foo: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n        },\n        bar: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;\n        }\n    };\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">2</span>; i++) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n\n        <span class=\"hljs-keyword\">continue</span>;\n    }\n\n    <span class=\"hljs-keyword\">var</span> obj = {\n        foo: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n        },\n\n        bar: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;\n        }\n    };\n}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-padding-newlines-after-blocks.js"},{"name":"disallowPaddingNewLinesAfterUseStrict","description":"<h1 id=\"disallowpaddingnewlinesafterusestrict\">disallowPaddingNewLinesAfterUseStrict</h1>\n<p>Disallow a blank line after <code>&#39;use strict&#39;;</code> statements</p>\n<p>Values: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowPaddingNewLinesAfterUseStrict\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-pi\">'use strict'</span>;\n<span class=\"hljs-comment\">// code</span>\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-pi\">'use strict'</span>;\n\n<span class=\"hljs-comment\">// code</span>\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-padding-newlines-after-use-strict.js"},{"name":"disallowPaddingNewLinesBeforeExport","description":"<h1 id=\"disallowpaddingnewlinesbeforeexport\">disallowPaddingNewLinesBeforeExport</h1>\n<p>Disallows newline before module.exports</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowPaddingNewLinesBeforeExport\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-built_in\">module</span>.exports = a;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-built_in\">module</span>.exports = a;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-padding-newlines-before-export.js"},{"name":"disallowPaddingNewlinesBeforeKeywords","description":"<h1 id=\"disallowpaddingnewlinesbeforekeywords\">disallowPaddingNewlinesBeforeKeywords</h1>\n<p>Disallow an empty line above the specified keywords.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted types or <code>true</code> to disallow padding new lines after all of the keywords below.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowPaddingNewlinesBeforeKeywords\"</span>: [\n    <span class=\"hljs-string\">\"do\"</span>,\n    <span class=\"hljs-string\">\"for\"</span>,\n    <span class=\"hljs-string\">\"if\"</span>,\n    <span class=\"hljs-string\">\"else\"</span>,\n    <span class=\"hljs-string\">\"switch\"</span>,\n    <span class=\"hljs-string\">\"case\"</span>,\n    <span class=\"hljs-string\">\"try\"</span>,\n    <span class=\"hljs-string\">\"catch\"</span>,\n    <span class=\"hljs-string\">\"void\"</span>,\n    <span class=\"hljs-string\">\"while\"</span>,\n    <span class=\"hljs-string\">\"with\"</span>,\n    <span class=\"hljs-string\">\"return\"</span>,\n    <span class=\"hljs-string\">\"typeof\"</span>,\n    <span class=\"hljs-string\">\"function\"</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(a)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (!a) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; b; i++) {\n        <span class=\"hljs-keyword\">if</span> (!a[i]) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(a)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (!a) {\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; b; i++) {\n        <span class=\"hljs-keyword\">if</span> (!a[i]) {\n\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-padding-newlines-before-keywords.js"},{"name":"disallowPaddingNewLinesBeforeLineComments","description":"<h1 id=\"disallowpaddingnewlinesbeforelinecomments\">disallowPaddingNewLinesBeforeLineComments</h1>\n<p>Disallows newline before line comments</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowPaddingNewLinesBeforeLineComments\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-comment\">// comment</span>\n<span class=\"hljs-keyword\">return</span> a;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-comment\">//comment</span>\n<span class=\"hljs-keyword\">return</span> a;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-padding-newlines-before-line-comments.js"},{"name":"disallowPaddingNewlinesInBlocks","description":"<h1 id=\"disallowpaddingnewlinesinblocks\">disallowPaddingNewlinesInBlocks</h1>\n<p>Disallows blocks from beginning or ending with 2 newlines.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code> validates all non-empty blocks.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowPaddingNewlinesInBlocks\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    doSomething();\n}\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {doSomething();}\n<span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n\n    doSomething();\n\n}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-padding-newlines-in-blocks.js"},{"name":"disallowPaddingNewLinesInObjects","description":"<h1 id=\"disallowpaddingnewlinesinobjects\">disallowPaddingNewLinesInObjects</h1>\n<p>Disallows newline inside curly braces of all objects.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowPaddingNewLinesInObjects\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = { a: <span class=\"hljs-number\">1</span> };\nfoo({a: {b: <span class=\"hljs-number\">1</span>}});\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {\n    a: <span class=\"hljs-number\">1</span>\n};\nfoo({\n    a: {\n        b: <span class=\"hljs-number\">1</span>\n    }\n});\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-padding-newlines-in-objects.js"},{"name":"disallowQuotedKeysInObjects","description":"<h1 id=\"disallowquotedkeysinobjects\">disallowQuotedKeysInObjects</h1>\n<p>Disallows quoted keys in object if possible.</p>\n<p>Types: <code>String</code> or <code>Boolean</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code> for strict mode</li>\n<li><code>&quot;allButReserved&quot;</code> allows ES3+ reserved words to remain quoted which is helpful\nwhen using this option with JSHint&#39;s <code>es3</code> flag.</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowQuotedKeysInObjects\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid-for-mode-true-\">Valid for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = { a: { <span class=\"hljs-keyword\">default</span>: <span class=\"hljs-number\">1</span> } };\n</code></pre>\n<h5 id=\"valid-for-mode-allbutreserved-\">Valid for mode <code>&quot;allButReserved&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'default'</span>: <span class=\"hljs-number\">2</span>};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {<span class=\"hljs-string\">'a'</span>: <span class=\"hljs-number\">1</span>};\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-quoted-keys-in-objects.js"},{"name":"disallowRightStickedOperators","description":"<h1 id=\"disallowrightstickedoperators\">disallowRightStickedOperators</h1>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-right-sticked-operators.js"},{"name":"disallowSemicolons","description":"<h1 id=\"disallowsemicolons\">disallowSemicolons</h1>\n<p>Disallows lines from ending in a semicolon.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSemicolons\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>\n;[b].forEach(c)\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>;\n[b].forEach(c);\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-semicolons.js"},{"name":"disallowSpaceAfterBinaryOperators","description":"<h1 id=\"disallowspaceafterbinaryoperators\">disallowSpaceAfterBinaryOperators</h1>\n<p>Requires sticking binary operators to the right.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted operators or <code>true</code> to disallow space after all possible binary operators</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpaceAfterBinaryOperators\"</span>: [\n    <span class=\"hljs-string\">\"=\"</span>,\n    <span class=\"hljs-string\">\",\"</span>,\n    <span class=\"hljs-string\">\"+\"</span>,\n    <span class=\"hljs-string\">\"-\"</span>,\n    <span class=\"hljs-string\">\"/\"</span>,\n    <span class=\"hljs-string\">\"*\"</span>,\n    <span class=\"hljs-string\">\"==\"</span>,\n    <span class=\"hljs-string\">\"===\"</span>,\n    <span class=\"hljs-string\">\"!=\"</span>,\n    <span class=\"hljs-string\">\"!==\"</span>\n    <span class=\"hljs-comment\">// etc</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">x +y;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">x+ y;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-after-binary-operators.js"},{"name":"disallowSpaceAfterKeywords","description":"<h1 id=\"disallowspaceafterkeywords\">disallowSpaceAfterKeywords</h1>\n<p>Disallows space after keyword.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted keywords or <code>true</code> to disallow spaces after all possible keywords.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpaceAfterKeywords\"</span>: [\n    <span class=\"hljs-string\">\"if\"</span>,\n    <span class=\"hljs-string\">\"else\"</span>,\n    <span class=\"hljs-string\">\"for\"</span>,\n    <span class=\"hljs-string\">\"while\"</span>,\n    <span class=\"hljs-string\">\"do\"</span>,\n    <span class=\"hljs-string\">\"switch\"</span>,\n    <span class=\"hljs-string\">\"try\"</span>,\n    <span class=\"hljs-string\">\"catch\"</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span>(x &gt; y) {\n    y++;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (x &gt; y) {\n    y++;\n}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-after-keywords.js"},{"name":"disallowSpaceAfterLineComment","description":"<h1 id=\"disallowspaceafterlinecomment\">disallowSpaceAfterLineComment</h1>\n<p>Requires that a line comment (<code>//</code>) not be followed by a space.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpaceAfterLineComment\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">//A comment</span>\n<span class=\"hljs-comment\">/* A comment*/</span>\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// A comment</span>\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-after-line-comment.js"},{"name":"disallowSpaceAfterObjectKeys","description":"<h1 id=\"disallowspaceafterobjectkeys\">disallowSpaceAfterObjectKeys</h1>\n<p>Disallows space after object keys.</p>\n<p>Types: <code>Boolean</code> or <code>String</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code></li>\n<li><code>&quot;ignoreSingleLine&quot;</code> ignores objects if the object only takes up a single line</li>\n<li><code>&quot;ignoreMultiLine&quot;</code> ignores objects if the object takes up multiple lines</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpaceAfterObjectKeys\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a: <span class=\"hljs-number\">1</span>};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a : <span class=\"hljs-number\">1</span>};\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-after-object-keys.js"},{"name":"disallowSpaceAfterPrefixUnaryOperators","description":"<h1 id=\"disallowspaceafterprefixunaryoperators\">disallowSpaceAfterPrefixUnaryOperators</h1>\n<p>Requires sticking unary operators to the right.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted operators or <code>true</code> to disallow space after prefix for all unary operators</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpaceAfterPrefixUnaryOperators\"</span>: [<span class=\"hljs-string\">\"++\"</span>, <span class=\"hljs-string\">\"--\"</span>, <span class=\"hljs-string\">\"+\"</span>, <span class=\"hljs-string\">\"-\"</span>, <span class=\"hljs-string\">\"~\"</span>, <span class=\"hljs-string\">\"!\"</span>]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">x = !y; y = ++z;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">x = ! y; y = ++ z;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-after-prefix-unary-operators.js"},{"name":"disallowSpaceBeforeBinaryOperators","description":"<h1 id=\"disallowspacebeforebinaryoperators\">disallowSpaceBeforeBinaryOperators</h1>\n<p>Requires sticking binary operators to the left.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted operators or <code>true</code> to disallow space before all possible binary operators</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpaceBeforeBinaryOperators\"</span>: [\n    <span class=\"hljs-string\">\"=\"</span>,\n    <span class=\"hljs-string\">\",\"</span>,\n    <span class=\"hljs-string\">\"+\"</span>,\n    <span class=\"hljs-string\">\"-\"</span>,\n    <span class=\"hljs-string\">\"/\"</span>,\n    <span class=\"hljs-string\">\"*\"</span>,\n    <span class=\"hljs-string\">\"==\"</span>,\n    <span class=\"hljs-string\">\"===\"</span>,\n    <span class=\"hljs-string\">\"!=\"</span>,\n    <span class=\"hljs-string\">\"!==\"</span>\n    <span class=\"hljs-comment\">// etc</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">x+ y;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">x + y;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-before-binary-operators.js"},{"name":"disallowSpaceBeforeBlockStatements","description":"<h1 id=\"disallowspacebeforeblockstatements\">disallowSpaceBeforeBlockStatements</h1>\n<p>Disallows space before block statements (for loops, control structures).</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpaceBeforeBlockStatements\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (cond){\n    foo();\n} <span class=\"hljs-keyword\">else</span>{\n   bar();\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> e <span class=\"hljs-keyword\">in</span> elements){\n    bar(e);\n}\n\n<span class=\"hljs-keyword\">while</span> (cond){\n    foo();\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (cond) {\n    foo();\n} <span class=\"hljs-keyword\">else</span> {\n   bar();\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> e <span class=\"hljs-keyword\">in</span> elements) {\n    bar(e);\n}\n\n<span class=\"hljs-keyword\">while</span> (cond) {\n    foo();\n}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-before-block-statements.js"},{"name":"disallowSpaceBeforeKeywords","description":"<h1 id=\"disallowspacebeforekeywords\">disallowSpaceBeforeKeywords</h1>\n<p>Disallows space before keyword.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted keywords or <code>true</code> to disallow spaces before all possible keywords.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpaceBeforeKeywords\"</span>: [\n    <span class=\"hljs-string\">\"else\"</span>,\n    <span class=\"hljs-string\">\"catch\"</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">}<span class=\"hljs-keyword\">else</span> {\n    y--;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">} <span class=\"hljs-keyword\">else</span> {\n    y--;\n}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-before-keywords.js"},{"name":"disallowSpaceBeforeObjectValues","description":"<h1 id=\"disallowspacebeforeobjectvalues\">disallowSpaceBeforeObjectValues</h1>\n<p>Disallows space after object keys.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpaceBeforeObjectValues\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a:<span class=\"hljs-number\">1</span>};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a: <span class=\"hljs-number\">1</span>};\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-before-object-values.js"},{"name":"disallowSpaceBeforePostfixUnaryOperators","description":"<h1 id=\"disallowspacebeforepostfixunaryoperators\">disallowSpaceBeforePostfixUnaryOperators</h1>\n<p>Requires sticking unary operators to the left.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted operators or <code>true</code> to disallow space before postfix for all unary operators\n(i.e. increment/decrement operators)</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpaceBeforePostfixUnaryOperators\"</span>: [<span class=\"hljs-string\">\"++\"</span>, <span class=\"hljs-string\">\"--\"</span>]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">x = y++; y = z--;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">x = y ++; y = z --;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-before-postfix-unary-operators.js"},{"name":"disallowSpaceBetweenArguments","description":"<h1 id=\"disallowspacebetweenarguments\">disallowSpaceBetweenArguments</h1>\n<p>Ensure there are no spaces after argument separators in call expressions.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpaceBetweenArguments\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">a(b,c);\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">a(b, c);\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-between-arguments.js"},{"name":"disallowSpacesInAnonymousFunctionExpression","description":"<h1 id=\"disallowspacesinanonymousfunctionexpression\">disallowSpacesInAnonymousFunctionExpression</h1>\n<p>Disallows space before <code>()</code> or <code>{}</code> in anonymous function expressions.</p>\n<p>Type: <code>Object</code></p>\n<p>Values: <code>&quot;beforeOpeningRoundBrace&quot;</code> and <code>&quot;beforeOpeningCurlyBrace&quot;</code> as child properties.\nChild properties must be set to <code>true</code>.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInAnonymousFunctionExpression\"</span>: {\n    <span class=\"hljs-string\">\"beforeOpeningRoundBrace\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeOpeningCurlyBrace\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{};\n<span class=\"hljs-keyword\">var</span> Foo = {\n    foo: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{};\n}\narray.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{});\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{};\n<span class=\"hljs-keyword\">var</span> Foo = {\n    foo: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span></span>{};\n}\narray.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{});\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-spaces-in-anonymous-function-expression.js"},{"name":"disallowSpacesInCallExpression","description":"<h1 id=\"disallowspacesincallexpression\">disallowSpacesInCallExpression</h1>\n<p>Disallows space before <code>()</code> in call expressions.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInCallExpression\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = foobar();\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = foobar ();\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-spaces-in-call-expression.js"},{"name":"disallowSpacesInConditionalExpression","description":"<h1 id=\"disallowspacesinconditionalexpression\">disallowSpacesInConditionalExpression</h1>\n<p>Disallows space before and/or after <code>?</code> or <code>:</code> in conditional expressions.</p>\n<p>Types: <code>Object</code> or <code>Boolean</code></p>\n<p>Values: <code>&quot;afterTest&quot;</code>, <code>&quot;beforeConsequent&quot;</code>, <code>&quot;afterConsequent&quot;</code>, <code>&quot;beforeAlternate&quot;</code> as child properties,\nor <code>true</code> to set all properties to true. Child properties must be set to <code>true</code>. These token names correspond to:</p>\n<pre><code>var a = b ? c : d;\n         ^ ^ ^ ^\n         | | | |\n         | | | └- beforeAlternate\n         | | └--- afterConsequent\n         | └-------- beforeConsequent\n         └---------- afterTest\n</code></pre><h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInConditionalExpression\"</span>: {\n    <span class=\"hljs-string\">\"afterTest\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeConsequent\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"afterConsequent\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeAlternate\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = b?c:d;\n<span class=\"hljs-keyword\">var</span> a= b?c:d;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = b ?c:d;\n<span class=\"hljs-keyword\">var</span> a = b? c:d;\n<span class=\"hljs-keyword\">var</span> a = b?c :d;\n<span class=\"hljs-keyword\">var</span> a = b?c: d;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-spaces-in-conditional-expression.js"},{"name":"disallowSpacesInForStatement","description":"<h1 id=\"disallowspacesinforstatement\">disallowSpacesInForStatement</h1>\n<p>Disallow spaces in between for statement.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code> to disallow spaces in between for statement.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInForStatement\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;l;i++) {\n    x++;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i&lt;l; i++) {\n    x++;\n}\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i&lt;l;i++) {\n    x++;\n}\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>;i&lt;l; i++) {\n    x++;\n}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-spaces-in-for-statement.js"},{"name":"disallowSpacesInFunctionDeclaration","description":"<h1 id=\"disallowspacesinfunctiondeclaration\">disallowSpacesInFunctionDeclaration</h1>\n<p>Disallows space before <code>()</code> or <code>{}</code> in function declarations.</p>\n<p>Type: <code>Object</code></p>\n<p>Values: <code>&quot;beforeOpeningRoundBrace&quot;</code> and <code>&quot;beforeOpeningCurlyBrace&quot;</code> as child properties.\nChild properties must be set to <code>true</code>.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInFunctionDeclaration\"</span>: {\n    <span class=\"hljs-string\">\"beforeOpeningRoundBrace\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeOpeningCurlyBrace\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span></span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span> </span>{}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-params\">()</span></span>{}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-params\">()</span> </span>{}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-spaces-in-function-declaration.js"},{"name":"disallowSpacesInFunctionExpression","description":"<h1 id=\"disallowspacesinfunctionexpression\">disallowSpacesInFunctionExpression</h1>\n<p>Disallows space before <code>()</code> or <code>{}</code> in function expressions (both <a href=\"#disallowspacesinnamedfunctionexpression\">named</a>\nand <a href=\"#disallowspacesinanonymousfunctionexpression\">anonymous</a>).</p>\n<p>Type: <code>Object</code></p>\n<p>Values: <code>&quot;beforeOpeningRoundBrace&quot;</code> and <code>&quot;beforeOpeningCurlyBrace&quot;</code> as child properties.\nChild properties must be set to <code>true</code>.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInFunctionExpression\"</span>: {\n    <span class=\"hljs-string\">\"beforeOpeningRoundBrace\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeOpeningCurlyBrace\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span></span>{};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span></span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span> </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-params\">()</span></span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-params\">()</span> </span>{};\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-spaces-in-function-expression.js"},{"name":"disallowSpacesInFunction","description":"<h1 id=\"disallowspacesinfunction\">disallowSpacesInFunction</h1>\n<p>Expression</p>\n<p>Disallows space before <code>()</code> or <code>{}</code> in function expressions (both <a href=\"#disallowspacesinnamedfunctionexpression\">named</a>\nand <a href=\"#disallowspacesinanonymousfunctionexpression\">anonymous</a>) and function declarations.</p>\n<p>Type: <code>Object</code></p>\n<p>Values: <code>&quot;beforeOpeningRoundBrace&quot;</code> and <code>&quot;beforeOpeningCurlyBrace&quot;</code> as child properties.\nChild properties must be set to <code>true</code>.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInFunction\"</span>: {\n    <span class=\"hljs-string\">\"beforeOpeningRoundBrace\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeOpeningCurlyBrace\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span></span>{};\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span></span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span></span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span> </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-params\">()</span></span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-params\">()</span> </span>{};\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span> </span>{}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-params\">()</span></span>{}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-params\">()</span> </span>{}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-spaces-in-function.js"},{"name":"disallowSpacesInNamedFunctionExpression","description":"<h1 id=\"disallowspacesinnamedfunctionexpression\">disallowSpacesInNamedFunctionExpression</h1>\n<p>Disallows space before <code>()</code> or <code>{}</code> in named function expressions.</p>\n<p>Type: <code>Object</code></p>\n<p>Values: <code>&quot;beforeOpeningRoundBrace&quot;</code> and <code>&quot;beforeOpeningCurlyBrace&quot;</code> as child properties.\nChild properties must be set to <code>true</code>.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInNamedFunctionExpression\"</span>: {\n    <span class=\"hljs-string\">\"beforeOpeningRoundBrace\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeOpeningCurlyBrace\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span></span>{};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span> </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-params\">()</span></span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-params\">()</span> </span>{};\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-spaces-in-named-function-expression.js"},{"name":"disallowSpacesInsideArrayBrackets","description":"<h1 id=\"disallowspacesinsidearraybrackets\">disallowSpacesInsideArrayBrackets</h1>\n<p>Disallows space after opening array square bracket and before closing.</p>\n<p>Types: <code>Boolean</code>, <code>String</code> or <code>Object</code></p>\n<p>Values: <code>&quot;all&quot;</code> or <code>true</code> for strict mode, <code>&quot;nested&quot;</code> (<em>deprecated</em> use <code>&quot;allExcept&quot;: [ &quot;[&quot;, &quot;]&quot; ]</code>)\nignores closing brackets in a row.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInsideArrayBrackets\"</span>: <span class=\"hljs-string\">\"all\"</span>\n\n<span class=\"hljs-comment\">// or</span>\n\n<span class=\"hljs-string\">\"disallowSpacesInsideArrayBrackets\"</span>: {\n    <span class=\"hljs-string\">\"allExcept\"</span>: [ <span class=\"hljs-string\">\"[\"</span>, <span class=\"hljs-string\">\"]\"</span>, <span class=\"hljs-string\">\"{\"</span>, <span class=\"hljs-string\">\"}\"</span> ]\n}\n</code></pre>\n<h5 id=\"valid-for-mode-all-\">Valid for mode <code>&quot;all&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [[<span class=\"hljs-number\">1</span>]];\n</code></pre>\n<h5 id=\"valid-for-mode-nested-\">Valid for mode <code>&quot;nested&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [ [<span class=\"hljs-number\">1</span>] ];\n</code></pre>\n<h5 id=\"valid-for-mode-allexcept-\">Valid for mode <code>&quot;allExcept&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [ [<span class=\"hljs-number\">1</span>] ];\n<span class=\"hljs-keyword\">var</span> x = [ { a: <span class=\"hljs-number\">1</span> } ];\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [ [ <span class=\"hljs-number\">1</span> ] ];\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-spaces-inside-array-brackets.js"},{"name":"disallowSpacesInsideBrackets","description":"<h1 id=\"disallowspacesinsidebrackets\">disallowSpacesInsideBrackets</h1>\n<p>Disallows space after opening square bracket and before closing.</p>\n<p>Types: <code>Boolean</code> or <code>Object</code></p>\n<p>Values: <code>true</code> for strict mode, or <code>&quot;allExcept&quot;: [ &quot;[&quot;, &quot;]&quot; ]</code>\nignores closing brackets in a row.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInsideBrackets\"</span>: <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-comment\">// or</span>\n\n<span class=\"hljs-string\">\"disallowSpacesInsideBrackets\"</span>: {\n    <span class=\"hljs-string\">\"allExcept\"</span>: [ <span class=\"hljs-string\">\"[\"</span>, <span class=\"hljs-string\">\"]\"</span>, <span class=\"hljs-string\">\"{\"</span>, <span class=\"hljs-string\">\"}\"</span> ]\n}\n</code></pre>\n<h5 id=\"valid-for-mode-true-\">Valid for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [[<span class=\"hljs-number\">1</span>]];\n</code></pre>\n<h5 id=\"valid-for-mode-allexcept-\">Valid for mode <code>{ allExcept&quot;: [ &quot;[&quot;, &quot;]&quot;, &quot;{&quot;, &quot;}&quot; ] }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [ [<span class=\"hljs-number\">1</span>] ];\n<span class=\"hljs-keyword\">var</span> x = [ { a: <span class=\"hljs-number\">1</span> } ];\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [ [ <span class=\"hljs-number\">1</span> ] ];\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-spaces-inside-brackets.js"},{"name":"disallowSpacesInsideObjectBrackets","description":"<h1 id=\"disallowspacesinsideobjectbrackets\">disallowSpacesInsideObjectBrackets</h1>\n<p>Disallows space after opening object curly brace and before closing.</p>\n<p>Types: <code>Object</code>, <code>Boolean</code> or <code>String</code></p>\n<p>Values: <code>&quot;all&quot;</code> or <code>true</code> for strict mode, <code>&quot;nested&quot;</code> (<em>deprecated</em> use <code>&quot;allExcept&quot;: [&#39;}&#39;]</code>)\nignores closing brackets in a row.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInsideObjectBrackets\"</span>: {\n    <span class=\"hljs-string\">\"allExcept\"</span>: [ <span class=\"hljs-string\">\"}\"</span>, <span class=\"hljs-string\">\")\"</span> ]\n}\n\n<span class=\"hljs-comment\">// or</span>\n<span class=\"hljs-string\">\"disallowSpacesInsideObjectBrackets\"</span>: <span class=\"hljs-literal\">true</span> | <span class=\"hljs-string\">\"all\"</span> | <span class=\"hljs-string\">\"nested\"</span>\n</code></pre>\n<h5 id=\"valid-for-mode-all-\">Valid for mode <code>&quot;all&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a: {b: <span class=\"hljs-number\">1</span>}};\n</code></pre>\n<h5 id=\"valid-for-mode-nested-\">Valid for mode <code>&quot;nested&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a: {b: <span class=\"hljs-number\">1</span>} };\n</code></pre>\n<h5 id=\"valid-for-mode-allexcept-\">Valid for mode <code>&quot;allExcept&quot;: [&quot;}&quot;]</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a: {b: <span class=\"hljs-number\">1</span>} };\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = { a: { b: <span class=\"hljs-number\">1</span> } };\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-spaces-inside-object-brackets.js"},{"name":"disallowSpacesInsideParentheses","description":"<h1 id=\"disallowspacesinsideparentheses\">disallowSpacesInsideParentheses</h1>\n<p>Disallows space after opening round bracket and before closing.</p>\n<p>Types: <code>Object</code> or <code>Boolean</code></p>\n<p>Values: Either <code>true</code> or Object with <code>&quot;only&quot;</code> property as an array of tokens</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInsideParentheses\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid-for-true-value\">Valid for <code>true</code> value</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = (<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span>) * <span class=\"hljs-number\">3</span>;\n</code></pre>\n<h5 id=\"valid-for-only-value\">Valid for <code>only</code> value</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInsideParentheses\"</span>: { <span class=\"hljs-string\">\"only\"</span>: [ <span class=\"hljs-string\">\"{\"</span>, <span class=\"hljs-string\">\"}\"</span> ] }\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = ( <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span> );\n<span class=\"hljs-keyword\">var</span> x = foo({});\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = foo( {} );\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-spaces-inside-parentheses.js"},{"name":"disallowTrailingComma","description":"<h1 id=\"disallowtrailingcomma\">disallowTrailingComma</h1>\n<p>Disallows an extra comma following the final element of an array or object literal.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<p>JSHint: <a href=\"http://jshint.com/docs/options/#es3\"><code>es3</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowTrailingComma\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">var</span> bar = {a: <span class=\"hljs-string\">\"a\"</span>, b: <span class=\"hljs-string\">\"b\"</span>}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, ];\n<span class=\"hljs-keyword\">var</span> bar = {a: <span class=\"hljs-string\">\"a\"</span>, b: <span class=\"hljs-string\">\"b\"</span>, }\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-trailing-comma.js"},{"name":"disallowTrailingWhitespace","description":"<h1 id=\"disallowtrailingwhitespace\">disallowTrailingWhitespace</h1>\n<p>Requires all lines to end on a non-whitespace character</p>\n<p>Types: <code>Boolean</code> or <code>String</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code></li>\n<li><code>&quot;ignoreEmptyLines&quot;</code>: (default: <code>false</code>) allow whitespace on empty lines</li>\n</ul>\n<p>JSHint: <a href=\"http://jshint.com/docs/options/#trailing\"><code>trailing</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowTrailingWhitespace\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-string\">\"blah blah\"</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-string\">\"blah blah\"</span>; <span class=\"hljs-comment\">//&lt;-- whitespace character here</span>\n</code></pre>\n<h5 id=\"valid-for-true-\">Valid for <code>true</code></h5>\n<pre><code class=\"lang-js\">foo = <span class=\"hljs-string\">'bar'</span>;\n\nfoo = <span class=\"hljs-string\">'baz'</span>;\n</code></pre>\n<h5 id=\"invalid-for-true-but-valid-for-ignoreemptylines-\">Invalid for <code>true</code> but Valid for <code>ignoreEmptyLines</code></h5>\n<pre><code class=\"lang-js\">foo = <span class=\"hljs-string\">'bar'</span>;\n\\t\nfoo = <span class=\"hljs-string\">'baz'</span>;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-trailing-whitespace.js"},{"name":"disallowYodaConditions","description":"<h1 id=\"disallowyodaconditions\">disallowYodaConditions</h1>\n<p>Requires the variable to be the left hand operator when doing a boolean comparison</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowYodaConditions\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (a == <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">return</span>\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">1</span> == a) {\n    <span class=\"hljs-keyword\">return</span>\n}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-yoda-conditions.js"},{"name":"maximumLineLength","description":"<h1 id=\"maximumlinelength\">maximumLineLength</h1>\n<p>Requires all lines to be at most the number of characters specified</p>\n<p>Types: <code>Integer</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>Integer</code>: lines should be at most the number of characters specified</li>\n<li><code>Object</code>:<ul>\n<li><code>value</code>: (required) lines should be at most the number of characters specified</li>\n<li><code>tabSize</code>: (default: <code>1</code>) considered the tab character as number of specified spaces</li>\n<li><code>allowComments</code>: (default: <code>false</code>) allows comments to break the rule</li>\n<li><code>allowUrlComments</code>: (default: <code>false</code>) allows comments with long urls to break the rule</li>\n<li><code>allowRegex</code>: (default: <code>false</code>) allows regular expression literals to break the rule</li>\n</ul>\n</li>\n</ul>\n<p>JSHint: <a href=\"http://jshint.com/docs/options/#maxlen\"><code>maxlen</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"maximumLineLength\"</span>: <span class=\"hljs-number\">40</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> aLineOf40Chars = <span class=\"hljs-number\">123456789012345678</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> aLineOf41Chars = <span class=\"hljs-number\">1234567890123456789</span>;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/maximum-line-length.js"},{"name":"maximumNumberOfLines","description":"<h1 id=\"maximumnumberoflines\">maximumNumberOfLines</h1>\n<p>Requires the file to be at most the number of lines specified</p>\n<p>Type: <code>Integer</code></p>\n<p>Values:</p>\n<ul>\n<li><ul>\n<li><code>Integer</code>: file should be at most the number of lines specified</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"maximumNumberOfLines\"</span>: <span class=\"hljs-number\">100</span>\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/maximum-number-of-lines.js"},{"name":"requireAlignedObjectValues","description":"<h1 id=\"requirealignedobjectvalues\">requireAlignedObjectValues</h1>\n<p>Requires proper alignment in object literals.</p>\n<p>Type: <code>String</code></p>\n<p>Values:</p>\n<ul>\n<li><code>&quot;all&quot;</code> for strict mode,</li>\n<li><code>&quot;ignoreFunction&quot;</code> ignores objects if one of the property values is a function expression,</li>\n<li><code>&quot;ignoreLineBreak&quot;</code> ignores objects if there are line breaks between properties</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireAlignedObjectValues\"</span>: <span class=\"hljs-string\">\"all\"</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {\n    a   : <span class=\"hljs-number\">1</span>,\n    bcd : <span class=\"hljs-number\">2</span>,\n    ef  : <span class=\"hljs-string\">'str'</span>\n};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {\n    a : <span class=\"hljs-number\">1</span>,\n    bcd : <span class=\"hljs-number\">2</span>,\n    ef : <span class=\"hljs-string\">'str'</span>\n};\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-aligned-object-values.js"},{"name":"requireAnonymousFunctions","description":"<h1 id=\"requireanonymousfunctions\">requireAnonymousFunctions</h1>\n<p>Requires that a function expression be anonymous.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireAnonymousFunctions\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{\n\n};\n\n$(<span class=\"hljs-string\">'#foo'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{\n\n})\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">()</span></span>{\n\n};\n\n$(<span class=\"hljs-string\">'#foo'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span><span class=\"hljs-params\">()</span></span>{\n\n});\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-anonymous-functions.js"},{"name":"requireBlocksOnNewline","description":"<h1 id=\"requireblocksonnewline\">requireBlocksOnNewline</h1>\n<p>Requires blocks to begin and end with a newline</p>\n<p>Types: <code>Boolean</code> or <code>Integer</code></p>\n<p>Values: <code>true</code> validates all non-empty blocks,\n<code>Integer</code> specifies a minimum number of statements in the block before validating.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireBlocksOnNewline\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid-for-mode-true-\">Valid for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    doSomething();\n}\n<span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {doSomething();}\n</code></pre>\n<h5 id=\"valid-for-mode-1-\">Valid for mode <code>1</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    doSomething();\n    doSomethingElse();\n}\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) { doSomething(); }\n<span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) { doSomething(); doSomethingElse(); }\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-blocks-on-newline.js"},{"name":"requireCamelCaseOrUpperCaseIdentifiers","description":"<h1 id=\"requirecamelcaseoruppercaseidentifiers\">requireCamelCaseOrUpperCaseIdentifiers</h1>\n<p>Requires identifiers to be camelCased or UPPERCASE_WITH_UNDERSCORES</p>\n<p>Types: <code>Boolean</code> or <code>String</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code></li>\n<li><code>&quot;ignoreProperties&quot;</code> allows an exception for object property names.</li>\n</ul>\n<p>JSHint: <a href=\"http://jshint.com/docs/options/#camelcase\"><code>camelcase</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireCamelCaseOrUpperCaseIdentifiers\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid-for-mode-true-\">Valid for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> camelCase = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">var</span> CamelCase = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> _camelCase = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-keyword\">var</span> camelCase_ = <span class=\"hljs-number\">3</span>;\n<span class=\"hljs-keyword\">var</span> UPPER_CASE = <span class=\"hljs-number\">4</span>;\n</code></pre>\n<h5 id=\"invalid-for-mode-true-\">Invalid for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> lower_case = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> Mixed_case = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-keyword\">var</span> mixed_Case = <span class=\"hljs-number\">3</span>;\n</code></pre>\n<h5 id=\"valid-for-mode-ignoreproperties-\">Valid for mode <code>ignoreProperties</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> camelCase = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">var</span> CamelCase = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> _camelCase = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-keyword\">var</span> camelCase_ = <span class=\"hljs-number\">3</span>;\n<span class=\"hljs-keyword\">var</span> UPPER_CASE = <span class=\"hljs-number\">4</span>;\n<span class=\"hljs-keyword\">var</span> obj.snake_case = <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">var</span> camelCase = { snake_case: <span class=\"hljs-number\">6</span> };\n</code></pre>\n<h5 id=\"invalid-for-mode-ignoreproperties-\">Invalid for mode <code>ignoreProperties</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> lower_case = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> Mixed_case = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-keyword\">var</span> mixed_Case = <span class=\"hljs-number\">3</span>;\n<span class=\"hljs-keyword\">var</span> snake_case = { snake_case: <span class=\"hljs-number\">6</span> };\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-camelcase-or-uppercase-identifiers.js"},{"name":"requireCapitalizedComments","description":"<h1 id=\"requirecapitalizedcomments\">requireCapitalizedComments</h1>\n<p>Requires the first alphabetical character of a comment to be uppercase, unless it is part of a multi-line textblock.</p>\n<p>By default, the prefix for inline comments <code>jscs</code> is ignored.</p>\n<p>Types: <code>Boolean</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code></li>\n<li><code>Object</code>:<ul>\n<li><code>allExcept</code>: array of quoted exceptions</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<p><code>&quot;requireCapitalizedComments&quot;: true</code></p>\n<p>Valid:</p>\n<pre><code>// Valid\n//Valid\n\n/*\n  Valid\n */\n\n/**\n * Valid\n */\n\n// A textblock is a set of lines\n// that starts with a capitalized letter\n// and has one or more non-capitalized lines\n// afterwards\n\n// A textblock may also have multiple lines.\n// Those lines can be uppercase as well to support\n// sentense breaks in textblocks\n\n// 123 or any non-alphabetical starting character\n// @are also valid anywhere\n</code></pre><p>Invalid:</p>\n<pre><code>// invalid\n//invalid\n/** invalid */\n/**\n * invalid\n */\n</code></pre><pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireCapitalizedComments\"</span>: { <span class=\"hljs-string\">\"allExcept\"</span>: [<span class=\"hljs-string\">\"jshint\"</span>] }\n</code></pre>\n<p>Valid:</p>\n<pre><code>function sayHello() {\n    \\/* jshint: -W071 */\n\n    // I can now say hello in lots of statements, if I like.\n    return &quot;Hello&quot;;\n}\n</code></pre><ul>\n<li>Invalid:</li>\n</ul>\n<pre><code>function sayHello() {\n    \\/* jshint: -W071 */\n\n    // i can now say hello in lots of statements, if I like.\n    return &quot;Hello&quot;;\n}\n</code></pre><ul>\n<li>Invalid:</li>\n</ul>\n<pre><code>function sayHello() {\n    \\/* istanbul ignore next */\n\n    // I&#39;d like to ignore this statement in coverage reports.\n    return &quot;Hello&quot;;\n}\n</code></pre>","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-capitalized-comments.js"},{"name":"requireCapitalizedConstructors","description":"<h1 id=\"requirecapitalizedconstructors\">requireCapitalizedConstructors</h1>\n<p>Requires constructors to be capitalized (except for <code>this</code>)</p>\n<p>Types: <code>Boolean</code> or <code>Object</code></p>\n<p>Values: <code>true</code> or Object with <code>allExcept</code> Array of quoted identifiers which are exempted</p>\n<p>JSHint: <a href=\"http://jshint.com/docs/options/#newcap\"><code>newcap</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireCapitalizedConstructors\"</span>: <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-string\">\"requireCapitalizedConstructors\"</span>: {\n    allExcept: [<span class=\"hljs-string\">\"somethingNative\"</span>]\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-keyword\">new</span> B();\n<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">this</span>();\n<span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-keyword\">new</span> somethingNative();\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-keyword\">new</span> e();\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-capitalized-constructors.js"},{"name":"requireCommaBeforeLineBreak","description":"<h1 id=\"requirecommabeforelinebreak\">requireCommaBeforeLineBreak</h1>\n<p>Requires commas as last token on a line in lists.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<p>JSHint: <a href=\"http://www.jshint.com/docs/options/#laxcomma\"><code>laxcomma</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireCommaBeforeLineBreak\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {\n    one: <span class=\"hljs-number\">1</span>,\n    two: <span class=\"hljs-number\">2</span>\n};\n<span class=\"hljs-keyword\">var</span> y = { three: <span class=\"hljs-number\">3</span>, four: <span class=\"hljs-number\">4</span>};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {\n    one: <span class=\"hljs-number\">1</span>\n    , two: <span class=\"hljs-number\">2</span>\n};\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-comma-before-line-break.js"},{"name":"requireCurlyBraces","description":"<h1 id=\"requirecurlybraces\">requireCurlyBraces</h1>\n<p>Requires curly braces after statements.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted keywords or <code>true</code> to require curly braces after the following keywords:</p>\n<p>JSHint: <a href=\"http://jshint.com/docs/options/#curly\"><code>curly</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireCurlyBraces\"</span>: [\n    <span class=\"hljs-string\">\"if\"</span>,\n    <span class=\"hljs-string\">\"else\"</span>,\n    <span class=\"hljs-string\">\"for\"</span>,\n    <span class=\"hljs-string\">\"while\"</span>,\n    <span class=\"hljs-string\">\"do\"</span>,\n    <span class=\"hljs-string\">\"try\"</span>,\n    <span class=\"hljs-string\">\"catch\"</span>,\n    <span class=\"hljs-string\">\"case\"</span>,\n    <span class=\"hljs-string\">\"default\"</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (x) {\n    x++;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (x) x++;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-curly-braces.js"},{"name":"requireDollarBeforejQueryAssignment","description":"<h1 id=\"requiredollarbeforejqueryassignment\">requireDollarBeforejQueryAssignment</h1>\n<p>Require a $ before variable names that are jquery assignments.</p>\n<p>Types: <code>Boolean</code> or <code>String</code></p>\n<p>Values: <code>true</code> or <code>&quot;ignoreProperties&quot;</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireDollarBeforejQueryAssignment\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid-example-for-mode-true-\">Valid example for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> $x = $(<span class=\"hljs-string\">\".foo\"</span>);\n<span class=\"hljs-keyword\">var</span> y = {\n  $x: $(<span class=\"hljs-string\">\".bar\"</span>)\n};\n</code></pre>\n<h5 id=\"invalid-example-for-mode-true-\">Invalid example for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = $(<span class=\"hljs-string\">\".foo\"</span>);\n<span class=\"hljs-keyword\">var</span> y = {\n  x: $(<span class=\"hljs-string\">\".bar\"</span>)\n};\n</code></pre>\n<h5 id=\"valid-example-for-mode-ignoreproperties-\">Valid example for mode <code>ignoreProperties</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> $x = $(<span class=\"hljs-string\">\".foo\"</span>);\n<span class=\"hljs-keyword\">var</span> y = {\n  x: $(<span class=\"hljs-string\">\".bar\"</span>)\n};\n</code></pre>\n<h5 id=\"invalid-example-for-mode-ignoreproperties-\">Invalid example for mode <code>ignoreProperties</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = $(<span class=\"hljs-string\">\".foo\"</span>);\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-dollar-before-jquery-assignment.js"},{"name":"requireDotNotation","description":"<h1 id=\"requiredotnotation\">requireDotNotation</h1>\n<p>Requires member expressions to use dot notation when possible</p>\n<p>Types: <code>Boolean</code> or <code>String</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code></li>\n<li><code>&quot;except_snake_case&quot;</code> allow quoted snake cased identifiers</li>\n</ul>\n<p>JSHint: <a href=\"http://www.jshint.com/docs/options/#sub\"><code>sub</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireDotNotation\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid-for-true-\">Valid for <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = b[c];\n<span class=\"hljs-keyword\">var</span> a = b.c;\n<span class=\"hljs-keyword\">var</span> a = b[c.d];\n<span class=\"hljs-keyword\">var</span> a = b[<span class=\"hljs-number\">1</span>];\n<span class=\"hljs-keyword\">var</span> a = b[<span class=\"hljs-string\">'while'</span>]; <span class=\"hljs-comment\">//reserved word</span>\n</code></pre>\n<h5 id=\"valid-for-except_snake_case-\">Valid for <code>&quot;except_snake_case&quot;</code></h5>\n<pre><code>var a = b[c];\nvar a = b.c;\nvar a = b[&#39;snake_cased&#39;];\nvar a = b[&#39;camelCased_butWithSnakes&#39;];\n</code></pre><h5 id=\"invalid-for-true-\">Invalid for <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = b[<span class=\"hljs-string\">'c'</span>];\n<span class=\"hljs-keyword\">var</span> a = b[<span class=\"hljs-string\">'snake_cased'</span>];\n<span class=\"hljs-keyword\">var</span> a = b[<span class=\"hljs-string\">'_camelCased'</span>];\n<span class=\"hljs-keyword\">var</span> a = b[<span class=\"hljs-string\">'camelCased_'</span>];\n</code></pre>\n<h5 id=\"invalid-for-except_snake_case-\">Invalid for <code>&quot;except_snake_case&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = b[<span class=\"hljs-string\">'c'</span>];\n</code></pre>\n<h4 id=\"example-for-es3-false-or-es3-null-\">Example for <code>&quot;es3&quot;: false</code> or <code>&quot;es3&quot;: null</code></h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireDotNotation\"</span>: <span class=\"hljs-literal\">true</span>,\n<span class=\"hljs-string\">\"es3\"</span>: <span class=\"hljs-literal\">false</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = b[c];\n<span class=\"hljs-keyword\">var</span> a = b.c;\n<span class=\"hljs-keyword\">var</span> a = b[c.d];\n<span class=\"hljs-keyword\">var</span> a = b[<span class=\"hljs-number\">1</span>];\n<span class=\"hljs-keyword\">var</span> a = b.while;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = b[<span class=\"hljs-string\">'c'</span>];\n<span class=\"hljs-keyword\">var</span> a = b[<span class=\"hljs-string\">'while'</span>]; <span class=\"hljs-comment\">// reserved words can be property names in ES5</span>\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-dot-notation.js"},{"name":"requireFunctionDeclarations","description":"<h1 id=\"requirefunctiondeclarations\">requireFunctionDeclarations</h1>\n<p>Requires function declarations by disallowing assignment of functions\nexpressions to variables. Function expressions are allowed in all other\ncontexts, including when passed as function arguments or immediately invoked.</p>\n<p>Assignment of function expressions to object members is also permitted, since\nthese can&#39;t be declared.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireFunctionDeclarations\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">declared</span><span class=\"hljs-params\">()</span> </span>{\n\n};\n\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">iife</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-number\">0</span>;\n})();\n\n<span class=\"hljs-keyword\">var</span> obj = {\n    a: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{}\n};\n\nobj.b = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{ };\n\n$(<span class=\"hljs-string\">'#foo'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span><span class=\"hljs-params\">()</span> </span>{\n\n};)\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> expressed = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n\n};\n\n<span class=\"hljs-keyword\">var</span> expressed = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">deeply</span><span class=\"hljs-params\">()</span> </span>{\n\n};\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-function-declarations.js"},{"name":"requireKeywordsOnNewLine","description":"<h1 id=\"requirekeywordsonnewline\">requireKeywordsOnNewLine</h1>\n<p>Requires placing keywords on a new line.</p>\n<p>Type: <code>Array</code></p>\n<p>Values: Array of quoted keywords</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireKeywordsOnNewLine\"</span>: [<span class=\"hljs-string\">\"else\"</span>]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (x &lt; <span class=\"hljs-number\">0</span>) {\n    x++;\n}\n<span class=\"hljs-keyword\">else</span> {\n    x--;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (x &lt; <span class=\"hljs-number\">0</span>) {\n    x++;\n} <span class=\"hljs-keyword\">else</span> {\n    x--;\n}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-keywords-on-new-line.js"},{"name":"requireLeftStickedOperators","description":"<h1 id=\"requireleftstickedoperators\">requireLeftStickedOperators</h1>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-left-sticked-operators.js"},{"name":"requireLineBreakAfterVariableAssignment","description":"<h1 id=\"requirelinebreakaftervariableassignment\">requireLineBreakAfterVariableAssignment</h1>\n<p>Requires placing line feed after assigning a variable.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireLineBreakAfterVariableAssignment\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-number\">8</span>;\n<span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-number\">5</span>;\n\n<span class=\"hljs-keyword\">var</span> a, b, c,\n    foo = <span class=\"hljs-number\">7</span>,\n    bar = <span class=\"hljs-number\">8</span>;\n\n<span class=\"hljs-keyword\">var</span> a,\n    foo = <span class=\"hljs-number\">7</span>,\n    a, b, c,\n    bar = <span class=\"hljs-number\">8</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-number\">8</span>; <span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-number\">5</span>;\n\n<span class=\"hljs-keyword\">var</span> a, b, c,\n    foo = <span class=\"hljs-number\">7</span>, bar = <span class=\"hljs-number\">8</span>;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-line-break-after-variable-assignment.js"},{"name":"requireLineFeedAtFileEnd","description":"<h1 id=\"requirelinefeedatfileend\">requireLineFeedAtFileEnd</h1>\n<p>Requires placing line feed at file end.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireLineFeedAtFileEnd\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-line-feed-at-file-end.js"},{"name":"requireMultipleVarDecl","description":"<h1 id=\"requiremultiplevardecl\">requireMultipleVarDecl</h1>\n<p>Requires multiple <code>var</code> declaration.</p>\n<p>Types: <code>Boolean</code> or <code>String</code></p>\n<p>Values: <code>true</code> or <code>&quot;onevar&quot;</code></p>\n<p>if <code>requireMultipleVarDecl</code> defined as a <code>true</code> value, it will report only consecutive vars, if, on the other hand,\nvalue equals to <code>&quot;onevar&quot;</code> string, <code>requireMultipleVarDecl</code> will allow only one <code>var</code> per function scope.</p>\n<p>JSHint: <a href=\"http://jshint.com/docs/options/#onevar\"><code>onevar</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireMultipleVarDecl\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>,\n    y = <span class=\"hljs-number\">2</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-number\">2</span>;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-multiple-var-decl.js"},{"name":"requireNamedUnassignedFunctions","description":"<h1 id=\"requirenamedunassignedfunctions\">requireNamedUnassignedFunctions</h1>\n<p>Require unassigned functions to be named inline</p>\n<p>Types: <code>Boolean</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code></li>\n<li><code>Object</code>:<ul>\n<li><code>allExcept</code>: array of quoted identifiers</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireNamedUnassignedFunctions\"</span>: { <span class=\"hljs-string\">\"allExcept\"</span>: [<span class=\"hljs-string\">\"describe\"</span>, <span class=\"hljs-string\">\"it\"</span>] }\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">[].forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">x</span><span class=\"hljs-params\">()</span> </span>{});\n<span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{};\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">z</span><span class=\"hljs-params\">()</span> </span>{}\nit(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{});\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">[].forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{});\nbefore(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{});\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-named-unassigned-functions.js"},{"name":"requireNewlineBeforeBlockStatements","description":"<h1 id=\"requirenewlinebeforeblockstatements\">requireNewlineBeforeBlockStatements</h1>\n<p>Requires newline before opening curly brace of all block statements.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireNewlineBeforeBlockStatements\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">good</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">var</span> obj =\n    {\n        val: <span class=\"hljs-literal\">true</span>\n    };\n\n    <span class=\"hljs-keyword\">return</span> {\n        data: obj\n    };\n}\n\n<span class=\"hljs-keyword\">if</span> (cond)\n{\n    foo();\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> e <span class=\"hljs-keyword\">in</span> elements)\n{\n    bar(e);\n}\n\n<span class=\"hljs-keyword\">while</span> (cond)\n{\n    foo();\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bad</span><span class=\"hljs-params\">()</span></span>{\n    <span class=\"hljs-keyword\">var</span> obj = {\n        val: <span class=\"hljs-literal\">true</span>\n    };\n\n    <span class=\"hljs-keyword\">return</span> {\n        data: obj\n    };\n}\n\n<span class=\"hljs-keyword\">if</span> (cond){\n    foo();\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> e <span class=\"hljs-keyword\">in</span> elements){\n    bar(e);\n}\n\n<span class=\"hljs-keyword\">while</span> (cond){\n    foo();\n}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-newline-before-block-statements.js"},{"name":"requireOperatorBeforeLineBreak","description":"<h1 id=\"requireoperatorbeforelinebreak\">requireOperatorBeforeLineBreak</h1>\n<p>Requires operators to appear before line breaks and not after.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted operators or <code>true</code> to require all possible binary operators to appear before line breaks</p>\n<p>JSHint: <a href=\"http://www.jshint.com/docs/options/#laxbreak\"><code>laxbreak</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireOperatorBeforeLineBreak\"</span>: [\n    <span class=\"hljs-string\">\"?\"</span>,\n    <span class=\"hljs-string\">\"=\"</span>,\n    <span class=\"hljs-string\">\"+\"</span>,\n    <span class=\"hljs-string\">\"-\"</span>,\n    <span class=\"hljs-string\">\"/\"</span>,\n    <span class=\"hljs-string\">\"*\"</span>,\n    <span class=\"hljs-string\">\"==\"</span>,\n    <span class=\"hljs-string\">\"===\"</span>,\n    <span class=\"hljs-string\">\"!=\"</span>,\n    <span class=\"hljs-string\">\"!==\"</span>,\n    <span class=\"hljs-string\">\"&gt;\"</span>,\n    <span class=\"hljs-string\">\"&gt;=\"</span>,\n    <span class=\"hljs-string\">\"&lt;\"</span>,\n    <span class=\"hljs-string\">\"&lt;=\"</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">x = y ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2</span>;\nx = y ?\n    <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">x = y\n    ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2</span>;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-operator-before-line-break.js"},{"name":"requirePaddingNewLineAfterVariableDeclaration","description":"<h1 id=\"requirepaddingnewlineaftervariabledeclaration\">requirePaddingNewLineAfterVariableDeclaration</h1>\n<p>Requires an extra blank newline after var declarations, as long\nas it is not the last expression in the current block.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requirePaddingNewLineAfterVariableDeclaration\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {\n    a: <span class=\"hljs-number\">1</span>\n};\n\nfoo({\n    a: {\n        b: <span class=\"hljs-number\">1</span>\n    }\n});\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = { a: <span class=\"hljs-number\">1</span> };\nfoo({a:{b:<span class=\"hljs-number\">1</span>}});\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-padding-newline-after-variable-declaration.js"},{"name":"requirePaddingNewLinesAfterBlocks","description":"<h1 id=\"requirepaddingnewlinesafterblocks\">requirePaddingNewLinesAfterBlocks</h1>\n<p>Requires newline after blocks</p>\n<p>Type: <code>Boolean</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code>: always require a newline after blocks</li>\n<li><code>Object</code>:<ul>\n<li><code>&quot;allExcept&quot;</code>: <code>Array</code><ul>\n<li><code>&quot;inCallExpressions&quot;</code> Blocks don&#39;t need a line of padding in argument lists</li>\n<li><code>&quot;inArrayExpressions&quot;</code> Blocks don&#39;t need a line of padding in arrays</li>\n<li><code>&quot;inProperties&quot;</code> Blocks don&#39;t need a line of padding as object properties</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requirePaddingNewLinesAfterBlocks\"</span>: <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-string\">\"requirePaddingNewLinesAfterBlocks\"</span>: {\n    <span class=\"hljs-string\">\"allExcept\"</span>: [<span class=\"hljs-string\">\"inCallExpressions\"</span>, <span class=\"hljs-string\">\"inArrayExpressions\"</span>, <span class=\"hljs-string\">\"inProperties\"</span>]\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">2</span>; i++) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n\n        <span class=\"hljs-keyword\">continue</span>;\n    }\n\n    <span class=\"hljs-keyword\">var</span> obj = {\n        foo: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n        },\n\n        bar: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;\n        }\n    };\n\n    func(\n         <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n         }\n\n    );\n\n    <span class=\"hljs-keyword\">var</span> a = [\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n        }\n\n    ]\n\n}\n</code></pre>\n<h5 id=\"valid-for-allexcept-incallexpressions-\">Valid for <code>{ &quot;allExcept&quot;: [&quot;inCallExpressions&quot;] }</code></h5>\n<pre><code class=\"lang-js\">func(\n    <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-number\">3</span>,\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n);\n</code></pre>\n<h5 id=\"valid-for-allexcept-inarrayexpressions-\">Valid for <code>{ &quot;allExcept&quot;: [&quot;inArrayExpressions&quot;] }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = [\n    <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-number\">3</span>,\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n];\n</code></pre>\n<ul>\n<li><h5 id=\"valid-for-allexcept-inproperties-\">Valid for <code>{ &quot;allExcept&quot;: [&quot;inProperties&quot;] }</code></h5>\n</li>\n</ul>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = {\n    a: <span class=\"hljs-number\">2</span>,\n    b: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    },\n    c: <span class=\"hljs-number\">3</span>\n];\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">2</span>; i++) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n        <span class=\"hljs-keyword\">continue</span>;\n    }\n}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-padding-newlines-after-blocks.js"},{"name":"requirePaddingNewLinesAfterUseStrict","description":"<h1 id=\"requirepaddingnewlinesafterusestrict\">requirePaddingNewLinesAfterUseStrict</h1>\n<p>Requires a blank line after <code>&#39;use strict&#39;;</code> statements</p>\n<p>Values: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requirePaddingNewLinesAfterUseStrict\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-pi\">'use strict'</span>;\n\n<span class=\"hljs-comment\">// code</span>\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-pi\">'use strict'</span>;\n<span class=\"hljs-comment\">// code</span>\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-padding-newlines-after-use-strict.js"},{"name":"requirePaddingNewLinesBeforeExport","description":"<h1 id=\"requirepaddingnewlinesbeforeexport\">requirePaddingNewLinesBeforeExport</h1>\n<p>Requires newline before module.exports</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requirePaddingNewLinesBeforeExport\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-built_in\">module</span>.exports = a;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-built_in\">module</span>.exports = a;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-padding-newlines-before-export.js"},{"name":"requirePaddingNewlinesBeforeKeywords","description":"<h1 id=\"requirepaddingnewlinesbeforekeywords\">requirePaddingNewlinesBeforeKeywords</h1>\n<p>Requires an empty line above the specified keywords unless the keyword is the first expression in a block.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted types or <code>true</code> to require padding new lines before all of the keywords below.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requirePaddingNewlinesBeforeKeywords\"</span>: [\n    <span class=\"hljs-string\">\"do\"</span>,\n    <span class=\"hljs-string\">\"for\"</span>,\n    <span class=\"hljs-string\">\"if\"</span>,\n    <span class=\"hljs-string\">\"else\"</span>,\n    <span class=\"hljs-string\">\"switch\"</span>,\n    <span class=\"hljs-string\">\"case\"</span>,\n    <span class=\"hljs-string\">\"try\"</span>,\n    <span class=\"hljs-string\">\"catch\"</span>,\n    <span class=\"hljs-string\">\"void\"</span>,\n    <span class=\"hljs-string\">\"while\"</span>,\n    <span class=\"hljs-string\">\"with\"</span>,\n    <span class=\"hljs-string\">\"return\"</span>,\n    <span class=\"hljs-string\">\"typeof\"</span>,\n    <span class=\"hljs-string\">\"function\"</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(a)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (!a) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; b; i++) {\n        <span class=\"hljs-keyword\">if</span> (!a[i]) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(a)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (!a) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; b; i++) {\n        <span class=\"hljs-keyword\">if</span> (!a[i]) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-padding-newlines-before-keywords.js"},{"name":"requirePaddingNewLinesBeforeLineComments","description":"<h1 id=\"requirepaddingnewlinesbeforelinecomments\">requirePaddingNewLinesBeforeLineComments</h1>\n<p>Requires newline before line comments</p>\n<p>Types: <code>Boolean</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code>: always require a newline before line comments</li>\n<li><code>Object</code>:<ul>\n<li><code>&quot;allExcept&quot;</code>: <code>&quot;firstAfterCurly&quot;</code> Comments may be first line of block without extra padding</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"examples\">Examples</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requirePaddingNewLinesBeforeLineComments\"</span>: <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-string\">\"requirePaddingNewLinesBeforeLineComments\"</span>: { <span class=\"hljs-string\">\"allExcept\"</span>: <span class=\"hljs-string\">\"firstAfterCurly\"</span> }\n</code></pre>\n<h5 id=\"valid-for-true-\">Valid for <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-number\">3</span>; <span class=\"hljs-comment\">// comment</span>\n\n<span class=\"hljs-comment\">// comment</span>\n<span class=\"hljs-keyword\">return</span> a;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n\n  <span class=\"hljs-comment\">// comment</span>\n}\n</code></pre>\n<h5 id=\"valid-for-allexcept-firstaftercurly-\">Valid for <code>{ &quot;allExcept&quot;: &quot;firstAfterCurly&quot; }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-comment\">// comment</span>\n<span class=\"hljs-keyword\">return</span> a;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// comment</span>\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-comment\">//comment</span>\n<span class=\"hljs-keyword\">return</span> a;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// comment</span>\n}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-padding-newlines-before-line-comments.js"},{"name":"requirePaddingNewlinesInBlocks","description":"<h1 id=\"requirepaddingnewlinesinblocks\">requirePaddingNewlinesInBlocks</h1>\n<p>Requires blocks to begin and end with 2 newlines</p>\n<p>Types: <code>Boolean</code> or <code>Integer</code></p>\n<p>Values: <code>true</code> validates all non-empty blocks,\n<code>Integer</code> specifies a minimum number of statements in the block before validating.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requirePaddingNewlinesInBlocks\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid-for-mode-true-\">Valid for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n\n    doSomething();\n\n}\n<span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {doSomething();}\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    doSomething();\n}\n</code></pre>\n<h5 id=\"valid-for-mode-1-\">Valid for mode <code>1</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n\n    doSomething();\n    doSomethingElse();\n\n}\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    doSomething();\n}\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) { doSomething(); }\n<span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) { doSomething(); doSomethingElse(); }\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    doSomething();\n    doSomethingElse();\n}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-padding-newlines-in-blocks.js"},{"name":"requirePaddingNewLinesInObjects","description":"<h1 id=\"requirepaddingnewlinesinobjects\">requirePaddingNewLinesInObjects</h1>\n<p>Requires newline inside curly braces of all objects.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requirePaddingNewLinesInObjects\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {\n    a: <span class=\"hljs-number\">1</span>\n};\nfoo({\n    a: {\n        b: <span class=\"hljs-number\">1</span>\n    }\n});\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = { a: <span class=\"hljs-number\">1</span> };\nfoo({a:{b:<span class=\"hljs-number\">1</span>}});\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-padding-newlines-in-objects.js"},{"name":"requireParenthesesAroundIIFE","description":"<h1 id=\"requireparenthesesaroundiife\">requireParenthesesAroundIIFE</h1>\n<p>Requires parentheses around immediately invoked function expressions.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<p>JSHint: <a href=\"http://www.jshint.com/docs/options/#immed\"><code>immed</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireParenthesesAroundIIFE\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>; })();\n<span class=\"hljs-keyword\">var</span> b = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>; }());\n<span class=\"hljs-keyword\">var</span> c = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">3</span>; }).call(<span class=\"hljs-keyword\">this</span>, arg1);\n<span class=\"hljs-keyword\">var</span> d = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">3</span>; }.call(<span class=\"hljs-keyword\">this</span>, arg1));\n<span class=\"hljs-keyword\">var</span> e = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{ <span class=\"hljs-keyword\">return</span> d; }).apply(<span class=\"hljs-keyword\">this</span>, args);\n<span class=\"hljs-keyword\">var</span> f = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{ <span class=\"hljs-keyword\">return</span> d; }.apply(<span class=\"hljs-keyword\">this</span>, args));\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>; }();\n<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">3</span>; }.call(<span class=\"hljs-keyword\">this</span>, arg1);\n<span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{ <span class=\"hljs-keyword\">return</span> d; }.apply(<span class=\"hljs-keyword\">this</span>, args);\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-parentheses-around-iife.js"},{"name":"requireQuotedKeysInObjects","description":"<h1 id=\"requirequotedkeysinobjects\">requireQuotedKeysInObjects</h1>\n<p>Requires quoted keys in objects.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireQuotedKeysInObjects\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">  * <span class=\"hljs-keyword\">var</span> x = { <span class=\"hljs-string\">'a'</span>: { <span class=\"hljs-string\">\"default\"</span>: <span class=\"hljs-number\">1</span> } };\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = { a: <span class=\"hljs-number\">1</span> };\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-quoted-keys-in-objects.js"},{"name":"requireRightStickedOperators","description":"<h1 id=\"requirerightstickedoperators\">requireRightStickedOperators</h1>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-right-sticked-operators.js"},{"name":"requireSemicolons","description":"<h1 id=\"requiresemicolons\">requireSemicolons</h1>\n<p>Requires semicolon after:</p>\n<ul>\n<li>var declaration</li>\n<li>expression statement</li>\n<li>return</li>\n<li>throw</li>\n<li>break</li>\n<li>continue</li>\n<li>do-while</li>\n</ul>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSemicolons\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-semicolons.js"},{"name":"requireSpaceAfterBinaryOperators","description":"<h1 id=\"requirespaceafterbinaryoperators\">requireSpaceAfterBinaryOperators</h1>\n<p>Disallows sticking binary operators to the right.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted operators or <code>true</code> to require space after all possible binary operators</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpaceAfterBinaryOperators\"</span>: [\n    <span class=\"hljs-string\">\"=\"</span>,\n    <span class=\"hljs-string\">\",\"</span>,\n    <span class=\"hljs-string\">\"+\"</span>,\n    <span class=\"hljs-string\">\"-\"</span>,\n    <span class=\"hljs-string\">\"/\"</span>,\n    <span class=\"hljs-string\">\"*\"</span>,\n    <span class=\"hljs-string\">\"==\"</span>,\n    <span class=\"hljs-string\">\"===\"</span>,\n    <span class=\"hljs-string\">\"!=\"</span>,\n    <span class=\"hljs-string\">\"!==\"</span>\n    <span class=\"hljs-comment\">// etc</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">x + y;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">x +y;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-after-binary-operators.js"},{"name":"requireSpaceAfterKeywords","description":"<h1 id=\"requirespaceafterkeywords\">requireSpaceAfterKeywords</h1>\n<p>Requires space after keyword.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted keywords or <code>true</code> to require all of the keywords below to have a space afterward.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpaceAfterKeywords\"</span>: [\n    <span class=\"hljs-string\">\"do\"</span>,\n    <span class=\"hljs-string\">\"for\"</span>,\n    <span class=\"hljs-string\">\"if\"</span>,\n    <span class=\"hljs-string\">\"else\"</span>,\n    <span class=\"hljs-string\">\"switch\"</span>,\n    <span class=\"hljs-string\">\"case\"</span>,\n    <span class=\"hljs-string\">\"try\"</span>,\n    <span class=\"hljs-string\">\"catch\"</span>,\n    <span class=\"hljs-string\">\"void\"</span>,\n    <span class=\"hljs-string\">\"while\"</span>,\n    <span class=\"hljs-string\">\"with\"</span>,\n    <span class=\"hljs-string\">\"return\"</span>,\n    <span class=\"hljs-string\">\"typeof\"</span>,\n    <span class=\"hljs-string\">\"function\"</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span>(x) {\n    x++;\n}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-after-keywords.js"},{"name":"requireSpaceAfterLineComment","description":"<h1 id=\"requirespaceafterlinecomment\">requireSpaceAfterLineComment</h1>\n<p>Requires that a line comment (<code>//</code>) be followed by a space.</p>\n<p>Types: <code>Boolean</code>, <code>Object</code> or <code>String</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code></li>\n<li><code>&quot;allowSlash&quot;</code> (<em>deprecated</em> use <code>&quot;allExcept&quot;: [&quot;/&quot;]</code>) allows <code>///</code> format</li>\n<li><code>Object</code>:<ul>\n<li><code>allExcept</code>: array of allowed strings before space <code>//(here)</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpaceAfterLineComment\"</span>: { <span class=\"hljs-string\">\"allExcept\"</span>: [<span class=\"hljs-string\">\"#\"</span>, <span class=\"hljs-string\">\"=\"</span>] }\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// A comment</span>\n<span class=\"hljs-comment\">/*A comment*/</span>\n<span class=\"hljs-comment\">//# sourceURL=filename.js</span>\n<span class=\"hljs-comment\">//= require something</span>\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">//A comment</span>\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-after-line-comment.js"},{"name":"requireSpaceAfterObjectKeys","description":"<h1 id=\"requirespaceafterobjectkeys\">requireSpaceAfterObjectKeys</h1>\n<p>Requires space after object keys.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpaceAfterObjectKeys\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a : <span class=\"hljs-number\">1</span>};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a: <span class=\"hljs-number\">1</span>};\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-after-object-keys.js"},{"name":"requireSpaceAfterPrefixUnaryOperators","description":"<h1 id=\"requirespaceafterprefixunaryoperators\">requireSpaceAfterPrefixUnaryOperators</h1>\n<p>Disallows sticking unary operators to the right.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted operators or <code>true</code> to require space after prefix for all unary operators</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpaceAfterPrefixUnaryOperators\"</span>: [<span class=\"hljs-string\">\"++\"</span>, <span class=\"hljs-string\">\"--\"</span>, <span class=\"hljs-string\">\"+\"</span>, <span class=\"hljs-string\">\"-\"</span>, <span class=\"hljs-string\">\"~\"</span>, <span class=\"hljs-string\">\"!\"</span>]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">x = ! y; y = ++ z;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">x = !y; y = ++z;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-after-prefix-unary-operators.js"},{"name":"requireSpaceBeforeBinaryOperators","description":"<h1 id=\"requirespacebeforebinaryoperators\">requireSpaceBeforeBinaryOperators</h1>\n<p>Disallows sticking binary operators to the left.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted operators or <code>true</code> to require space before all possible binary operators\nwithout comma operator, since it&#39;s rarely used with this rule</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpaceBeforeBinaryOperators\"</span>: [\n    <span class=\"hljs-string\">\"=\"</span>,\n    <span class=\"hljs-string\">\",\"</span>,\n    <span class=\"hljs-string\">\"+\"</span>,\n    <span class=\"hljs-string\">\"-\"</span>,\n    <span class=\"hljs-string\">\"/\"</span>,\n    <span class=\"hljs-string\">\"*\"</span>,\n    <span class=\"hljs-string\">\"==\"</span>,\n    <span class=\"hljs-string\">\"===\"</span>,\n    <span class=\"hljs-string\">\"!=\"</span>,\n    <span class=\"hljs-string\">\"!==\"</span>\n    <span class=\"hljs-comment\">// etc</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">x !== y;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">x!== y;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-before-binary-operators.js"},{"name":"requireSpaceBeforeBlockStatements","description":"<h1 id=\"requirespacebeforeblockstatements\">requireSpaceBeforeBlockStatements</h1>\n<p>Requires space(s) before block statements (for loops, control structures).</p>\n<p>Type: <code>Boolean</code> or <code>Integer</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code> require a single space</li>\n<li><code>Integer</code> require <em>at least</em> specified number of spaces</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpaceBeforeBlockStatements\"</span>: <span class=\"hljs-number\">1</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (cond) {\n    foo();\n} <span class=\"hljs-keyword\">else</span> {\n    bar();\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> e <span class=\"hljs-keyword\">in</span> elements) {\n    bar(e);\n}\n\n<span class=\"hljs-keyword\">while</span> (cond) {\n    foo();\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (cond){\n    foo();\n} <span class=\"hljs-keyword\">else</span>{\n    bar();\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> e <span class=\"hljs-keyword\">in</span> elements){\n    bar(e);\n}\n\n<span class=\"hljs-keyword\">while</span> (cond){\n    foo();\n}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-before-block-statements.js"},{"name":"requireSpaceBeforeKeywords","description":"<h1 id=\"requirespacebeforekeywords\">requireSpaceBeforeKeywords</h1>\n<p>Requires space before keyword.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted keywords or <code>true</code> to require all possible keywords to have a preceding space.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpaceBeforeKeywords\"</span>: [\n    <span class=\"hljs-string\">\"else\"</span>,\n    <span class=\"hljs-string\">\"while\"</span>,\n    <span class=\"hljs-string\">\"catch\"</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">} <span class=\"hljs-keyword\">else</span> {\n    x++;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">}<span class=\"hljs-keyword\">else</span> {\n    x++;\n}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-before-keywords.js"},{"name":"requireSpaceBeforeObjectValues","description":"<h1 id=\"requirespacebeforeobjectvalues\">requireSpaceBeforeObjectValues</h1>\n<p>Requires space after object keys.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpaceBeforeObjectValues\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a: <span class=\"hljs-number\">1</span>};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a:<span class=\"hljs-number\">1</span>};\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-before-object-values.js"},{"name":"requireSpaceBeforePostfixUnaryOperators","description":"<h1 id=\"requirespacebeforepostfixunaryoperators\">requireSpaceBeforePostfixUnaryOperators</h1>\n<p>Disallows sticking unary operators to the left.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted operators or <code>true</code> to require space before postfix for all unary operators\n(i.e. increment/decrement operators).</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpaceBeforePostfixUnaryOperators\"</span>: [<span class=\"hljs-string\">\"++\"</span>, <span class=\"hljs-string\">\"--\"</span>]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">x = y ++; y = z --;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">x = y++; y = z--;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-before-postfix-unary-operators.js"},{"name":"requireSpaceBetweenArguments","description":"<h1 id=\"requirespacebetweenarguments\">requireSpaceBetweenArguments</h1>\n<p>Ensure there are spaces after argument separators in call expressions.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpaceBetweenArguments\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">a(b, c);\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">a(b,c);\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-between-arguments.js"},{"name":"requireSpacesInAnonymousFunctionExpression","description":"<h1 id=\"requirespacesinanonymousfunctionexpression\">requireSpacesInAnonymousFunctionExpression</h1>\n<p>Requires space before <code>()</code> or <code>{}</code> in anonymous function expressions.</p>\n<p>Type: <code>Object</code></p>\n<p>Values: <code>&quot;beforeOpeningRoundBrace&quot;</code> and <code>&quot;beforeOpeningCurlyBrace&quot;</code> as child properties.\nChild properties must be set to <code>true</code>.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInAnonymousFunctionExpression\"</span>: {\n    <span class=\"hljs-string\">\"beforeOpeningRoundBrace\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeOpeningCurlyBrace\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{};\n<span class=\"hljs-keyword\">var</span> Foo = {\n    foo: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{};\n}\narray.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{});\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{};\n<span class=\"hljs-keyword\">var</span> Foo = {\n    foo: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span></span>{};\n}\narray.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{});\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-in-anonymous-function-expression.js"},{"name":"requireSpacesInCallExpression","description":"<h1 id=\"requirespacesincallexpression\">requireSpacesInCallExpression</h1>\n<p>Requires space before <code>()</code> in call expressions.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInCallExpression\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = foobar ();\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = foobar();\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-in-call-expression.js"},{"name":"requireSpacesInConditionalExpression","description":"<h1 id=\"requirespacesinconditionalexpression\">requireSpacesInConditionalExpression</h1>\n<p>Requires space before and/or after <code>?</code> or <code>:</code> in conditional expressions.</p>\n<p>Types: <code>Object</code> or <code>Boolean</code></p>\n<p>Values: <code>&quot;afterTest&quot;</code>, <code>&quot;beforeConsequent&quot;</code>, <code>&quot;afterConsequent&quot;</code>, <code>&quot;beforeAlternate&quot;</code> as child properties,\nor <code>true</code> to set all properties to <code>true</code>. Child properties must be set to <code>true</code>.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInConditionalExpression\"</span>: {\n    <span class=\"hljs-string\">\"afterTest\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeConsequent\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"afterConsequent\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeAlternate\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = b ? c : d;\n<span class=\"hljs-keyword\">var</span> a= b ? c : d;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = b? c : d;\n<span class=\"hljs-keyword\">var</span> a = b ?c : d;\n<span class=\"hljs-keyword\">var</span> a = b ? c: d;\n<span class=\"hljs-keyword\">var</span> a = b ? c :d;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-in-conditional-expression.js"},{"name":"requireSpacesInForStatement","description":"<h1 id=\"requirespacesinforstatement\">requireSpacesInForStatement</h1>\n<p>Requires spaces inbetween for statement.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code> to requires spaces inbetween for statement.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInForStatement\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i&lt;l; i++) {\n    x++;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>;i&lt;l;i++) {\n    x++;\n}\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i&lt;l;i++) {\n    x++;\n}\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>;i&lt;l; i++) {\n    x++;\n}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-in-for-statement.js"},{"name":"requireSpacesInFunctionDeclaration","description":"<h1 id=\"requirespacesinfunctiondeclaration\">requireSpacesInFunctionDeclaration</h1>\n<p>Requires space before <code>()</code> or <code>{}</code> in function declarations.</p>\n<p>Type: <code>Object</code></p>\n<p>Values: <code>&quot;beforeOpeningRoundBrace&quot;</code> and <code>&quot;beforeOpeningCurlyBrace&quot;</code> as child properties.\nChild properties must be set to <code>true</code>.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInFunctionDeclaration\"</span>: {\n    <span class=\"hljs-string\">\"beforeOpeningRoundBrace\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeOpeningCurlyBrace\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-params\">()</span> </span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span> </span>{}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-params\">()</span></span>{}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span></span>{}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-in-function-declaration.js"},{"name":"requireSpacesInFunctionExpression","description":"<h1 id=\"requirespacesinfunctionexpression\">requireSpacesInFunctionExpression</h1>\n<p>Requires space before <code>()</code> or <code>{}</code> in function expressions (both <a href=\"#requirespacesinnamedfunctionexpression\">named</a>\nand <a href=\"#requirespacesinanonymousfunctionexpression\">anonymous</a>).</p>\n<p>Type: <code>Object</code></p>\n<p>Values: <code>&quot;beforeOpeningRoundBrace&quot;</code> and <code>&quot;beforeOpeningCurlyBrace&quot;</code> as child properties.\nChild properties must be set to <code>true</code>.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInFunctionExpression\"</span>: {\n    <span class=\"hljs-string\">\"beforeOpeningRoundBrace\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeOpeningCurlyBrace\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-params\">()</span> </span>{};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span></span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span> </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-params\">()</span></span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span></span>{};\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-in-function-expression.js"},{"name":"requireSpacesInFunction","description":"<h1 id=\"requirespacesinfunction\">requireSpacesInFunction</h1>\n<p>Expression</p>\n<p>Requires space before <code>()</code> or <code>{}</code> in function expressions (both <a href=\"#requirespacesinnamedfunctionexpression\">named</a>\nand <a href=\"#requirespacesinanonymousfunctionexpression\">anonymous</a>) and function declarations.</p>\n<p>Type: <code>Object</code></p>\n<p>Values: <code>&quot;beforeOpeningRoundBrace&quot;</code> and <code>&quot;beforeOpeningCurlyBrace&quot;</code> as child properties.\nChild properties must be set to <code>true</code>.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInFunction\"</span>: {\n    <span class=\"hljs-string\">\"beforeOpeningRoundBrace\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeOpeningCurlyBrace\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-params\">()</span> </span>{};\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-params\">()</span> </span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span></span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span> </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-params\">()</span></span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span></span>{};\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span> </span>{}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-params\">()</span></span>{}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span></span>{}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-in-function.js"},{"name":"requireSpacesInNamedFunctionExpression","description":"<h1 id=\"requirespacesinnamedfunctionexpression\">requireSpacesInNamedFunctionExpression</h1>\n<p>Requires space before <code>()</code> or <code>{}</code> in named function expressions.</p>\n<p>Type: <code>Object</code></p>\n<p>Values: <code>&quot;beforeOpeningRoundBrace&quot;</code> and <code>&quot;beforeOpeningCurlyBrace&quot;</code> as child properties.\nChild properties must be set to <code>true</code>.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInNamedFunctionExpression\"</span>: {\n    <span class=\"hljs-string\">\"beforeOpeningRoundBrace\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeOpeningCurlyBrace\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-params\">()</span> </span>{};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span> </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> <span class=\"hljs-params\">()</span></span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span></span>{};\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-in-named-function-expression.js"},{"name":"requireSpacesInsideArrayBrackets","description":"<h1 id=\"requirespacesinsidearraybrackets\">requireSpacesInsideArrayBrackets</h1>\n<p>Requires space after opening array square bracket and before closing.</p>\n<p>Types: <code>String</code> or <code>Object</code></p>\n<p>Values: <code>&quot;all&quot;</code> for strict mode, <code>&quot;allButNested&quot;</code> (<em>deprecated</em> use <code>&quot;allExcept&quot;: [ &quot;[&quot;, &quot;]&quot;]</code>)\nignores closing brackets in a row.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInsideArrayBrackets\"</span>: <span class=\"hljs-string\">\"all\"</span>\n\n<span class=\"hljs-comment\">// or</span>\n\n<span class=\"hljs-string\">\"requireSpacesInsideArrayBrackets\"</span>: {\n    <span class=\"hljs-string\">\"allExcept\"</span>: [ <span class=\"hljs-string\">\"[\"</span>, <span class=\"hljs-string\">\"]\"</span>, <span class=\"hljs-string\">\"{\"</span>, <span class=\"hljs-string\">\"}\"</span> ]\n}\n</code></pre>\n<h5 id=\"valid-for-mode-all-\">Valid for mode <code>&quot;all&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [ <span class=\"hljs-number\">1</span> ];\n</code></pre>\n<h5 id=\"valid-for-mode-allbutnested-\">Valid for mode <code>&quot;allButNested&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [[ <span class=\"hljs-number\">1</span> ], [ <span class=\"hljs-number\">2</span> ]];\n</code></pre>\n<h5 id=\"valid-for-mode-allexcept-\">Valid for mode <code>&quot;allExcept&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [[ <span class=\"hljs-number\">1</span> ], [ <span class=\"hljs-number\">2</span> ]];\n<span class=\"hljs-keyword\">var</span> x = [{ a: <span class=\"hljs-number\">1</span> }, { b: <span class=\"hljs-number\">2</span>}];\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [<span class=\"hljs-number\">1</span>];\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-inside-array-brackets.js"},{"name":"requireSpacesInsideBrackets","description":"<h1 id=\"requirespacesinsidebrackets\">requireSpacesInsideBrackets</h1>\n<p>Requires space after opening square bracket and before closing.</p>\n<p>Types: <code>Boolean</code> or <code>Object</code></p>\n<p>Values: <code>true</code> for strict mode, or <code>&quot;allExcept&quot;: [ &quot;[&quot;, &quot;]&quot;]</code>\nignores closing brackets in a row.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInsideBrackets\"</span>: <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-comment\">// or</span>\n\n<span class=\"hljs-string\">\"requireSpacesInsideBrackets\"</span>: {\n    <span class=\"hljs-string\">\"allExcept\"</span>: [ <span class=\"hljs-string\">\"[\"</span>, <span class=\"hljs-string\">\"]\"</span>, <span class=\"hljs-string\">\"{\"</span>, <span class=\"hljs-string\">\"}\"</span> ]\n}\n</code></pre>\n<h5 id=\"valid-for-mode-true-\">Valid for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [ <span class=\"hljs-number\">1</span> ];\n</code></pre>\n<h5 id=\"valid-for-mode-allexcept-\">Valid for mode <code>{ allExcept&quot;: [ &quot;[&quot;, &quot;]&quot;, &quot;{&quot;, &quot;}&quot; ] }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [[ <span class=\"hljs-number\">1</span> ], [ <span class=\"hljs-number\">2</span> ]];\n<span class=\"hljs-keyword\">var</span> x = [{ a: <span class=\"hljs-number\">1</span> }, { b: <span class=\"hljs-number\">2</span>}];\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [<span class=\"hljs-number\">1</span>];\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-inside-brackets.js"},{"name":"requireSpacesInsideObjectBrackets","description":"<h1 id=\"requirespacesinsideobjectbrackets\">requireSpacesInsideObjectBrackets</h1>\n<p>Requires space after opening object curly brace and before closing.</p>\n<p>Types: <code>Object</code> or <code>String</code></p>\n<p>Values: <code>&quot;all&quot;</code> for strict mode, <code>&quot;allButNested&quot;</code> (<em>deprecated</em> use <code>&quot;allExcept&quot;: [&#39;}&#39;]</code>)\nignores closing brackets in a row.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInsideObjectBrackets\"</span>: {\n    <span class=\"hljs-string\">\"allExcept\"</span>: [ <span class=\"hljs-string\">\"}\"</span>, <span class=\"hljs-string\">\")\"</span> ]\n}\n\n<span class=\"hljs-comment\">// or</span>\n<span class=\"hljs-string\">\"requireSpacesInsideObjectBrackets\"</span>: <span class=\"hljs-literal\">true</span> | <span class=\"hljs-string\">\"all\"</span> | <span class=\"hljs-string\">\"allButNested\"</span>\n</code></pre>\n<h5 id=\"valid-for-mode-all-\">Valid for mode <code>&quot;all&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = { a: { b: <span class=\"hljs-number\">1</span> } };\n</code></pre>\n<h5 id=\"valid-for-mode-allbutnested-\">Valid for mode <code>&quot;allButNested&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = { a: { b: <span class=\"hljs-number\">1</span> }};\n</code></pre>\n<h5 id=\"valid-for-mode-allexcept-\">Valid for mode <code>&quot;allExcept&quot;: [ &quot;}&quot;, &quot;)&quot; ]</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = { a: (b ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2</span>)};\n<span class=\"hljs-keyword\">var</span> x = { a: { b: <span class=\"hljs-number\">1</span> }};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a: <span class=\"hljs-number\">1</span>};\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-inside-object-brackets.js"},{"name":"requireSpacesInsideParentheses","description":"<h1 id=\"requirespacesinsideparentheses\">requireSpacesInsideParentheses</h1>\n<p>Requires space after opening round bracket and before closing.</p>\n<p>Types: <code>Object</code> or <code>String</code></p>\n<p>Values: <code>&quot;all&quot;</code> for strict mode, <code>&quot;allButNested&quot;</code>\n(<em>deprecated</em> use <code>&quot;except&quot;: [&#39;(&#39;, &#39;)&#39;]</code>) ignores nested brackets in a row, you could also specify token exceptions.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInsideParentheses\"</span>: {\n    <span class=\"hljs-string\">\"all\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"except\"</span>: [ <span class=\"hljs-string\">\"{\"</span>, <span class=\"hljs-string\">\"}\"</span> ]\n}\n</code></pre>\n<h5 id=\"valid-for-mode-all-\">Valid for mode <code>&quot;all&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-built_in\">Math</span>.pow( ( <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span> ), ( <span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">4</span> ) );\n</code></pre>\n<h5 id=\"valid-for-mode-allbutnested-\">Valid for mode <code>&quot;allButNested&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-built_in\">Math</span>.pow(( <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span> ), ( <span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">4</span> ));\n</code></pre>\n<h5 id=\"valid-for-mode-all-with-except-\">Valid for mode <code>&quot;all&quot;</code> with <code>except</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-built_in\">Math</span>.pow( foo({ test: <span class=\"hljs-number\">1</span> }) );\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">4</span>);\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-inside-parentheses.js"},{"name":"requireTrailingComma","description":"<h1 id=\"requiretrailingcomma\">requireTrailingComma</h1>\n<p>Requires an extra comma following the final element of an array or object literal.</p>\n<p>Types: <code>Boolean</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code>: validates all arrays and objects</li>\n<li><code>Object</code>:<ul>\n<li><code>ignoreSingleValue</code>: allows single property objects and single element arrays to not require a trailing comma</li>\n<li><code>ignoreSingleLine</code>: allows objects and arrays on a single line to not require a trailing comma</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireTrailingComma\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>,];\n<span class=\"hljs-keyword\">var</span> bar = {a: <span class=\"hljs-string\">\"a\"</span>, b: <span class=\"hljs-string\">\"b\"</span>,}\n</code></pre>\n<h5 id=\"valid-with-ignoresinglevalue\">Valid with ignoreSingleValue</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> car = [<span class=\"hljs-number\">1</span>];\n<span class=\"hljs-keyword\">var</span> dar = {a: <span class=\"hljs-string\">\"a\"</span>};\n</code></pre>\n<h5 id=\"valid-with-ignoresingleline\">Valid with ignoreSingleLine</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> car = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">var</span> dar = {a: <span class=\"hljs-string\">\"a\"</span>, b: <span class=\"hljs-string\">\"b\"</span>};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">var</span> bar = {a: <span class=\"hljs-string\">\"a\"</span>, b: <span class=\"hljs-string\">\"b\"</span>}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-trailing-comma.js"},{"name":"requireYodaConditions","description":"<h1 id=\"requireyodaconditions\">requireYodaConditions</h1>\n<p>Requires the variable to be the right hand operator when doing a boolean comparison</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireYodaConditions\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">1</span> == a) {\n    <span class=\"hljs-keyword\">return</span>\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (a == <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">return</span>\n}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-yoda-conditions.js"},{"name":"safeContextKeyword","description":"<h1 id=\"safecontextkeyword\">safeContextKeyword</h1>\n<p>Option to check <code>var that = this</code> expressions</p>\n<p>Types: <code>Array</code> or <code>String</code></p>\n<p>Values: String value used for context local declaration</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"safeContextKeyword\"</span>: [<span class=\"hljs-string\">\"that\"</span>]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> that = <span class=\"hljs-keyword\">this</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> _this = <span class=\"hljs-keyword\">this</span>;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/safe-context-keyword.js"},{"name":"validateAlignedFunctionParameters","description":"<h1 id=\"validatealignedfunctionparameters\">validateAlignedFunctionParameters</h1>\n<p>Validates proper alignment of function parameters.</p>\n<p>Type: <code>Object</code> or <code>Boolean</code></p>\n<p>Values: <code>&quot;lineBreakAfterOpeningBraces&quot;</code>, <code>&quot;lineBreakBeforeClosingBraces&quot;</code> as child properties or <code>true</code>.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"validateAlignedFunctionParameters\"</span>: {\n  <span class=\"hljs-string\">\"lineBreakAfterOpeningBraces\"</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-string\">\"lineBreakBeforeClosingBraces\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(\n  thisIs,\n  theLongestList,\n  ofParametersEverWritten\n)</span> </span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(thisIs,\n          theLongestList,\n          ofParametersEverWritten)</span> </span>{}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/validate-aligned-function-parameters.js"},{"name":"validateIndentation","description":"<h1 id=\"validateindentation\">validateIndentation</h1>\n<p>Validates indentation for switch statements and block statements</p>\n<p>Types: <code>Integer</code>, <code>String</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>Integer</code>: A positive number of spaces</li>\n<li><code>String</code>: <code>&quot;\\t&quot;</code> for tab indentation</li>\n<li><code>Object</code>:<ul>\n<li><code>value</code>: (required) the same effect as the non-object values</li>\n<li><code>includeEmptyLines</code>: (default: <code>false</code>) require empty lines to be indented</li>\n</ul>\n</li>\n</ul>\n<p>JSHint: <a href=\"http://jshint.com/docs/options/#indent\"><code>indent</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"validateIndentation\"</span>: <span class=\"hljs-string\">\"\\t\"</span>\n</code></pre>\n<h5 id=\"valid-example-for-mode-2-\">Valid example for mode <code>2</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (a) {\n  b=c;\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(d)</span> </span>{\n    e=f;\n  }\n}\n</code></pre>\n<h5 id=\"invalid-example-for-mode-2-\">Invalid example for mode <code>2</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (a) {\n   b=c;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(d)</span> </span>{\n       e=f;\n}\n}\n</code></pre>\n<h5 id=\"valid-example-for-mode-t-\">Valid example for mode <code>&quot;\\t&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (a) {\n    b=c;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(d)</span> </span>{\n        e=f;\n    }\n}\n</code></pre>\n<h5 id=\"invalid-example-for-mode-t-\">Invalid example for mode <code>&quot;\\t&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (a) {\n     b=c;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(d)</span> </span>{\n           e=f;\n }\n}\n</code></pre>\n<h5 id=\"valid-example-for-mode-value-t-includeemptylines-true-\">Valid example for mode <code>{ &quot;value&quot;: &quot;\\t&quot;, &quot;includeEmptyLines&quot;: true }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (a) {\n    b=c;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(d)</span> </span>{\n        e=f;\n    }\n\n} <span class=\"hljs-comment\">// single tab character on previous line</span>\n</code></pre>\n<h5 id=\"invalid-example-for-mode-value-t-includeemptylines-true-\">Invalid example for mode <code>{ &quot;value&quot;: &quot;\\t&quot;, &quot;includeEmptyLines&quot;: true }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (a) {\n    b=c;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(d)</span> </span>{\n        e=f;\n    }\n\n} <span class=\"hljs-comment\">// no tab character on previous line</span>\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/validate-indentation.js"},{"name":"validateJSDoc","description":"<h1 id=\"validatejsdoc\">validateJSDoc</h1>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/validate-jsdoc.js"},{"name":"validateLineBreaks","description":"<h1 id=\"validatelinebreaks\">validateLineBreaks</h1>\n<p>Option to check line break characters</p>\n<p>Type: <code>String</code></p>\n<p>Values: <code>&quot;CR&quot;</code>, <code>&quot;LF&quot;</code>, <code>&quot;CRLF&quot;</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"validateLineBreaks\"</span>: <span class=\"hljs-string\">\"LF\"</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">LF</span>&gt;</span>\nx++;</span>\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">CRLF</span>&gt;</span>\nx++;</span>\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/validate-line-breaks.js"},{"name":"validateNewlineAfterArrayElements","description":"<h1 id=\"validatenewlineafterarrayelements\">validateNewlineAfterArrayElements</h1>\n<p>Requires each element in array on a single line when array length is more than passed maximum\nnumber or array fills more than one line.\nSet <code>ignoreBrackets</code> to <code>true</code> to allow elements on the same line with brackets.</p>\n<p>Type: <code>Boolean</code> or <code>Number</code> (maximum) or <code>Object</code> (<code>{maximum: Number, ignoreBrackets: Boolean}</code>)</p>\n<p>Values: <code>true</code></p>\n<p>Default: <code>{maximum: Infinity, ignoreBrackets: false}</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"validateNewlineAfterArrayElements\"</span>: {\n  <span class=\"hljs-string\">\"maximum\"</span>: <span class=\"hljs-number\">3</span>\n}\n</code></pre>\n<h5 id=\"valid-for-true-\">Valid for <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [{a: <span class=\"hljs-number\">1</span>}, [<span class=\"hljs-number\">2</span>], <span class=\"hljs-string\">'3'</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\n<span class=\"hljs-keyword\">var</span> x = [\n  {a: <span class=\"hljs-number\">1</span>},\n  [<span class=\"hljs-number\">2</span>],\n  <span class=\"hljs-string\">'3'</span>,\n  <span class=\"hljs-number\">4</span>\n];\n</code></pre>\n<h5 id=\"invalid-for-true-\">Invalid for <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [<span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-number\">2</span>];\n</code></pre>\n<h5 id=\"valid-for-3-\">Valid for <code>3</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [{a: <span class=\"hljs-number\">1</span>}, [<span class=\"hljs-number\">2</span>], <span class=\"hljs-string\">'3'</span>];\n<span class=\"hljs-keyword\">var</span> x = [\n  <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-number\">2</span>,\n  <span class=\"hljs-number\">3</span>,\n  <span class=\"hljs-number\">4</span>\n];\n</code></pre>\n<h5 id=\"invalid-for-3-\">Invalid for <code>3</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\n<span class=\"hljs-keyword\">var</span> x = [<span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-number\">2</span>,\n  <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">var</span> x = [\n    <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>\n];\n</code></pre>\n<h5 id=\"valid-for-maximum-2-ignorebrackets-true-\">Valid for <code>{maximum: 2, ignoreBrackets: true}</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [{a: <span class=\"hljs-number\">1</span>}, [<span class=\"hljs-number\">2</span>]];\n<span class=\"hljs-keyword\">var</span> x = [<span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-number\">2</span>,\n  <span class=\"hljs-number\">3</span>];\n</code></pre>\n<h5 id=\"invalid-for-maximum-2-ignorebrackets-true-\">Invalid for <code>{maximum: 2, ignoreBrackets: true}</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">var</span> x = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>,\n  <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">var</span> x = [<span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/validate-newline-after-array-elements.js"},{"name":"validateParameterSeparator","description":"<h1 id=\"validateparameterseparator\">validateParameterSeparator</h1>\n<p>Enable validation of separators between function parameters. Will ignore newlines.</p>\n<p>Type: <code>String</code></p>\n<p>Values:</p>\n<ul>\n<li><code>&quot;,&quot;</code>: function parameters are immediately followed by a comma</li>\n<li><code>&quot;, &quot;</code>: function parameters are immediately followed by a comma and then a space</li>\n<li><code>&quot; ,&quot;</code>: function parameters are immediately followed by a space and then a comma</li>\n<li><code>&quot; , &quot;</code>: function parameters are immediately followed by a space, a comma, and then a space</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"validateParameterSeparator\"</span>: <span class=\"hljs-string\">\", \"</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">(b, c)</span> </span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">(b , c)</span> </span>{}\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/validate-parameter-separator.js"},{"name":"validateQuoteMarks","description":"<h1 id=\"validatequotemarks\">validateQuoteMarks</h1>\n<p>Requires all quote marks to be either the supplied value, or consistent if <code>true</code></p>\n<p>Types: <code>Boolean</code>, <code>String</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>&quot;\\&quot;&quot;</code>: all strings require double quotes</li>\n<li><code>&quot;&#39;&quot;</code>: all strings require single quotes</li>\n<li><code>true</code>: all strings require the quote mark first encountered in the source code</li>\n<li><code>Object</code>:<ul>\n<li><code>escape</code>: allow the &quot;other&quot; quote mark to be used, but only to avoid having to escape</li>\n<li><code>mark</code>: the same effect as the non-object values</li>\n</ul>\n</li>\n</ul>\n<p>JSHint: <a href=\"http://jshint.com/docs/options/#quotmark\"><code>quotmark</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"validateQuoteMarks\"</span>: <span class=\"hljs-string\">\"\\\"\"</span>\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"validateQuoteMarks\"</span>: { <span class=\"hljs-string\">\"mark\"</span>: <span class=\"hljs-string\">\"\\\"\"</span>, <span class=\"hljs-string\">\"escape\"</span>: <span class=\"hljs-literal\">true</span> }\n</code></pre>\n<h5 id=\"valid-example-for-mode-mark-escape-true-\">Valid example for mode <code>{ &quot;mark&quot;: &quot;\\&quot;&quot;, &quot;escape&quot;: true }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">\"x\"</span>;\n<span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-string\">'\"x\"'</span>;\n</code></pre>\n<h5 id=\"invalid-example-for-mode-mark-escape-true-\">Invalid example for mode <code>{ &quot;mark&quot;: &quot;\\&quot;&quot;, &quot;escape&quot;: true }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">\"x\"</span>;\n<span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-string\">'x'</span>;\n</code></pre>\n<h5 id=\"valid-example-for-mode-or-mode-true-\">Valid example for mode <code>&quot;\\&quot;&quot;</code> or mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">\"x\"</span>;\n</code></pre>\n<h5 id=\"valid-example-for-mode-or-mode-true-\">Valid example for mode <code>&quot;&#39;&quot;</code> or mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">'x'</span>;\n</code></pre>\n<h5 id=\"invalid-example-for-mode-true-\">Invalid example for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">\"x\"</span>, y = <span class=\"hljs-string\">'y'</span>;\n</code></pre>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/validate-quote-marks.js"}],"index":{"introduction":"JSCS is a code style linter for programmatically enforcing your style guide.\nYou can configure JSCS for your project in detail using over 90 validation rules,\nincluding presets from popular style guides like jQuery, Airbnb, Google, and more.\n","badges":[{"title":"Build Status","url":"https://travis-ci.org/jscs-dev/node-jscs","imageUrl":"https://travis-ci.org/jscs-dev/node-jscs.svg?branch=master"},{"title":"Windows CI","url":"https://ci.appveyor.com/project/jscs-dev/node-jscs/branch/master","imageUrl":"https://ci.appveyor.com/api/projects/status/github/jscs-dev/node-jscs?svg=true"},{"title":"Coverage Status","url":"https://coveralls.io/r/jscs-dev/node-jscs?branch=master","imageUrl":"https://img.shields.io/coveralls/jscs-dev/node-jscs.svg?style=flat"},{"title":"Dependency Status","url":"https://david-dm.org/jscs-dev/node-jscs","imageUrl":"https://david-dm.org/jscs-dev/node-jscs.svg?theme=shields.io&style=flat"},{"title":"devDependency Status","url":"https://david-dm.org/jscs-dev/node-jscs#info=devDependencies","imageUrl":"https://david-dm.org/jscs-dev/node-jscs/dev-status.svg?theme=shields.io&style=flat"}],"title":"JSCS — JavaScript Code Style.\n","users":[{"name":"jQuery","url":"http://jquery.com/"},{"name":"Adobe","url":"http://www.adobe.com/"},{"name":"Bootstrap","url":"http://getbootstrap.com/"},{"name":"AngularJS","url":"https://angularjs.org/"},{"name":"Yandex","url":"https://yandex.com/"},{"name":"Wikimedia","url":"https://www.wikimedia.org/"},{"name":"Grunt","url":"http://gruntjs.com/"},{"name":"Ember.js","url":"http://www.emberjs.com/"},{"name":"Ionic","url":"http://ionicframework.com/"},{"name":"Moment.js","url":"http://momentjs.com/"},{"name":"TodoMVC","url":"http://todomvc.com/"},{"name":"Famous","url":"http://famo.us/"},{"name":"less.js","url":"http://lesscss.org/"},{"name":"Goodvidio","url":"http://goodvid.io/"}]},"maintainers":[{"name":"Marat Dulin","email":"mdevils@yandex.ru","githubUsername":"mdevils","role":"General architecture, common rules"},{"name":"Oleg Gaidarenko","email":"markelog@gmail.com","githubUsername":"markelog","role":"CLI, integration, common rules"},{"name":"Mike Sherov","email":"mike.sherov@gmail.com","githubUsername":"mikesherov","role":"Ex-jshint rules, common rules"},{"name":"Joel Kemp","email":"joel@mrjoelkemp.com","githubUsername":"mrjoelkemp","role":"Bug fixes, common rules"},{"name":"Alexej Yaroshevich","email":"zxqfox@gmail.com","githubUsername":"zxqfox","role":"Bug fixes, common rules"}],"overview":"<div class=\"toc\"><div class=\"toc-header\">Table of contents:</div>\n<ul>\n<li><a href=\"#presets\">Presets</a></li>\n<li><a href=\"#friendly-packages\">Friendly packages</a></li>\n<li><a href=\"#installation\">Installation</a></li>\n<li><a href=\"#cli\">CLI</a></li>\n<li><a href=\"#options\">Options</a></li>\n<li><a href=\"#error-suppression\">Error Suppression</a></li>\n<li><a href=\"#versioning-semver\">Versioning &amp; Semver</a></li>\n</ul>\n</div>\n<h2 id=\"presets\">Presets</h2>\n<p>Note: the easiest way to use a preset is with the <a href=\"#preset\">preset</a> option described below.</p>\n<ul>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/airbnb.json\">Airbnb</a> — <a href=\"https://github.com/airbnb/javascript\">https://github.com/airbnb/javascript</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/crockford.json\">Crockford</a> — <a href=\"http://javascript.crockford.com/code.html\">http://javascript.crockford.com/code.html</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/google.json\">Google</a> — <a href=\"https://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml\">https://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/grunt.json\">Grunt</a> — <a href=\"http://gruntjs.com/contributing#syntax\">http://gruntjs.com/contributing#syntax</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/jquery.json\">jQuery</a> — <a href=\"https://contribute.jquery.org/style-guide/js/\">https://contribute.jquery.org/style-guide/js/</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/mdcs.json\">MDCS</a> — <a href=\"https://github.com/mrdoob/three.js/wiki/Mr.doob&#39;s-Code-Style%E2%84%A2\">https://github.com/mrdoob/three.js/wiki/Mr.doob&#39;s-Code-Style™</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/node-style-guide.json\">node-style-guide</a> - <a href=\"https://github.com/felixge/node-style-guide\">https://github.com/felixge/node-style-guide</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/wikimedia.json\">Wikimedia</a> — <a href=\"https://www.mediawiki.org/wiki/Manual:Coding_conventions/JavaScript\">https://www.mediawiki.org/wiki/Manual:Coding_conventions/JavaScript</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/wordpress.json\">Wordpress</a> — <a href=\"https://make.wordpress.org/core/handbook/coding-standards/javascript/\">https://make.wordpress.org/core/handbook/coding-standards/javascript/</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/yandex.json\">Yandex</a> — <a href=\"https://github.com/yandex/codestyle/blob/master/javascript.md\">https://github.com/yandex/codestyle/blob/master/javascript.md</a></li>\n</ul>\n<p>You can specifically disable any preset rule by creating a <code>.jscsrc</code> config file and assigning it to null, like so:</p>\n<pre><code class=\"lang-json\">{\n    \"<span class=\"hljs-attribute\">preset</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"jquery\"</span></span>,\n    \"<span class=\"hljs-attribute\">requireCurlyBraces</span>\": <span class=\"hljs-value\"><span class=\"hljs-literal\">null</span>\n</span>}\n</code></pre>\n<h2 id=\"friendly-packages\">Friendly packages</h2>\n<ul>\n<li>Atom plugin: <a href=\"https://atom.io/packages/linter-jscs\">https://atom.io/packages/linter-jscs</a></li>\n<li>Brackets Extension: <a href=\"https://github.com/globexdesigns/brackets-jscs\">https://github.com/globexdesigns/brackets-jscs</a></li>\n<li>Grunt task: <a href=\"https://github.com/jscs-dev/grunt-jscs/\">https://github.com/jscs-dev/grunt-jscs/</a></li>\n<li>Gulp task: <a href=\"https://github.com/jscs-dev/gulp-jscs/\">https://github.com/jscs-dev/gulp-jscs/</a></li>\n<li>Overcommit Git pre-commit hook manager: <a href=\"https://github.com/brigade/overcommit/\">https://github.com/brigade/overcommit/</a></li>\n<li>SublimeText 3 Plugin: <a href=\"https://github.com/SublimeLinter/SublimeLinter-jscs/\">https://github.com/SublimeLinter/SublimeLinter-jscs/</a></li>\n<li>Syntastic VIM Plugin: <a href=\"https://github.com/scrooloose/syntastic/blob/master/syntax_checkers/javascript/jscs.vim/\">https://github.com/scrooloose/syntastic/.../syntax_checkers/javascript/jscs.vim/</a></li>\n<li>Web Essentials for Visual Studio 2013: <a href=\"https://github.com/madskristensen/WebEssentials2013/\">https://github.com/madskristensen/WebEssentials2013/</a></li>\n<li>IntelliJ IDEA, RubyMine, WebStorm, PhpStorm, PyCharm plugin: <a href=\"https://github.com/idok/jscs-plugin\">https://github.com/idok/jscs-plugin</a></li>\n</ul>\n<h3 id=\"extensions\">Extensions</h3>\n<ul>\n<li>A TeamCity reporter: <a href=\"https://github.com/wurmr/jscs-teamcity-reporter\">https://github.com/wurmr/jscs-teamcity-reporter</a></li>\n<li>JSDoc rules extension: <a href=\"https://github.com/jscs-dev/jscs-jsdoc\">https://github.com/jscs-dev/jscs-jsdoc</a></li>\n</ul>\n<h2 id=\"installation\">Installation</h2>\n<p><code>jscs</code> can be installed using <code>npm</code>:</p>\n<pre><code>npm install jscs -g\n</code></pre><p>To run <code>jscs</code>, you can use the following command from the project root:</p>\n<pre><code>jscs path[ path[...]]\n</code></pre><p>You can also pipe input into jscs:</p>\n<pre><code>cat myfile.js | jscs\n</code></pre><h2 id=\"cli\">CLI</h2>\n<p>Some CLI options can be put in your <code>.jscsrc</code> as well (such as <code>esnext</code>).</p>\n<h3 id=\"-fix-x-\"><code>--fix</code> (<code>-x</code>)</h3>\n<p>Will apply fixes to all supported style rules. (Currently whitespace rules, <a href=\"http://jscs.info/rules.html#requirelinefeedatfileend\">EOF rule</a>, and <a href=\"http://jscs.info/rules.html#validateindentation\">validateIndentation</a>)</p>\n<pre><code>jscs path[ path[...]] --fix\n</code></pre><h3 id=\"-auto-configure-\"><code>--auto-configure</code></h3>\n<p>Presents a walkthrough that allows you to generate a JSCS configuration by\nchoosing a preset and handling violated rules.</p>\n<pre><code>jscs --auto-configure path\n</code></pre><p><code>path</code> can be a file or directory to check the presets against</p>\n<h3 id=\"-config-c-\"><code>--config</code> (<code>-c</code>)</h3>\n<p>Allows to define path to the config file.</p>\n<pre><code>jscs path[ path[...]] --config=./.config.json\n</code></pre><p>If there is no <code>--config</code> option specified, <code>jscs</code> it will consequentially search for <code>jscsConfig</code> option in <code>package.json</code> file then for <code>.jscsrc</code> (which is a just JSON with comments) and <code>.jscs.json</code> files in the current working directory then in nearest ancestor until it hits the system root.</p>\n<h3 id=\"-preset-p-\"><code>--preset</code> (<code>-p</code>)</h3>\n<p>If defined will use predefined rules for specific code style.</p>\n<pre><code>jscs path[ path[...]] --preset=jquery\n</code></pre><p>In order to add/remove preset rules you will need to create a <code>.jscsrc</code> config file.</p>\n<h3 id=\"-reporter-r-\"><code>--reporter</code> (<code>-r</code>)</h3>\n<p><code>jscs</code> itself provides six reporters: <code>checkstyle</code>, <code>console</code>, <code>inline</code>, <code>inlinesingle</code>, <code>junit</code> and <code>text</code>.</p>\n<pre><code>jscs path[ path[...]] --reporter=console\n</code></pre><p>But you also can specify your own reporter, since this flag accepts relative or absolute paths too.</p>\n<pre><code>jscs path[ path[...]] --reporter=./some-dir/my-reporter.js\n</code></pre><h3 id=\"-esnext-e-\"><code>--esnext</code> (<code>-e</code>)</h3>\n<p>Attempts to parse your code as ES6 using the harmony version of the esprima parser. Please note that this is currently experimental, and will improve over time.</p>\n<h3 id=\"-esprima-s-\"><code>--esprima</code> (<code>-s</code>)</h3>\n<p>Attempts to parse your code with a custom Esprima version.</p>\n<pre><code>jscs path[ path[...]] --esprima=esprima-fb\n</code></pre><h3 id=\"-error-filter-f-\"><code>--error-filter</code> (<code>-f</code>)</h3>\n<p>The path to a module that determines whether or not an error should be reported.</p>\n<pre><code>jscs path[ path[...]] --error-filter=path/to/my/module.js\n</code></pre><h3 id=\"-no-colors-n-\"><code>--no-colors</code> (<code>-n</code>)</h3>\n<p>Clean output without colors.</p>\n<h3 id=\"-max-errors-m-\"><code>--max-errors</code> (<code>-m</code>)</h3>\n<p>Set the maximum number of errors to report</p>\n<h3 id=\"-help-h-\"><code>--help</code> (<code>-h</code>)</h3>\n<p>Outputs usage information.</p>\n<h3 id=\"-verbose-v-\"><code>--verbose</code> (<code>-v</code>)</h3>\n<p>Prepends the name of the offending rule to all error messages.</p>\n<h3 id=\"-version-v-\"><code>--version</code> (<code>-V</code>)</h3>\n<p>Outputs version of <code>jscs</code>.</p>\n<h2 id=\"options\">Options</h2>\n<h3 id=\"plugins\">plugins</h3>\n<p>Paths to load plugins. See the wiki page for more details about the <a href=\"https://github.com/jscs-dev/node-jscs/wiki/Plugin-API\">Plugin API</a></p>\n<p>Values: Array of NPM package names or paths</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"plugins\"</span>: [<span class=\"hljs-string\">\"jscs-plugin\"</span>, <span class=\"hljs-string\">\"./lib/project-jscs-plugin\"</span>]\n</code></pre>\n<h3 id=\"additionalrules\">additionalRules</h3>\n<p>Path to load additional rules</p>\n<p>Type: <code>Array</code></p>\n<p>Values: Array of file matching patterns</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"additionalRules\"</span>: [<span class=\"hljs-string\">\"project-rules/*.js\"</span>]\n</code></pre>\n<h3 id=\"preset\">preset</h3>\n<p>Extends defined rules with preset rules.</p>\n<p>Type: <code>String</code></p>\n<p>Values: <code>&quot;airbnb&quot;</code>, <code>&quot;crockford&quot;</code>, <code>&quot;google&quot;</code>, <code>&quot;jquery&quot;</code>, <code>&quot;mdcs&quot;</code>, <code>&quot;node-style-guide&quot;</code>, <code>&quot;wikimedia&quot;</code>, <code>wordpress</code>, <code>&quot;yandex&quot;</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"preset\"</span>: <span class=\"hljs-string\">\"jquery\"</span>\n</code></pre>\n<p>You can specifically disable any preset rule by assigning it to null, like so:</p>\n<pre><code class=\"lang-json\">{\n    \"<span class=\"hljs-attribute\">preset</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"jquery\"</span></span>,\n    \"<span class=\"hljs-attribute\">requireCurlyBraces</span>\": <span class=\"hljs-value\"><span class=\"hljs-literal\">null</span>\n</span>}\n</code></pre>\n<h3 id=\"excludefiles\">excludeFiles</h3>\n<p>Disables style checking for specified paths declared with glob patterns.</p>\n<p>Type: <code>Array</code></p>\n<p>Values: Array of file matching patterns</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"excludeFiles\"</span>: [<span class=\"hljs-string\">\"node_modules/**\"</span>, <span class=\"hljs-string\">\"src/!(bar|foo)\"</span>]\n</code></pre>\n<h3 id=\"fileextensions\">fileExtensions</h3>\n<p>Changes the set of file extensions that will be processed.</p>\n<p>Type: <code>Array</code> or <code>String</code> or <code>&quot;*&quot;</code></p>\n<p>Values: A single file extension or an Array of file extensions, beginning with a <code>.</code>. The matching is case <em>insensitive</em>. If <code>&quot;*&quot;</code> is provided, all files regardless of extension will match.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"fileExtensions\"</span>: [<span class=\"hljs-string\">\".js\"</span>, <span class=\"hljs-string\">\".jsx\"</span>]\n</code></pre>\n<h4 id=\"default\">Default</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"fileExtensions\"</span>: [<span class=\"hljs-string\">\".js\"</span>]\n</code></pre>\n<h3 id=\"maxerrors\">maxErrors</h3>\n<p>Set the maximum number of errors to report</p>\n<p>Type: <code>Number</code></p>\n<p>Default: Infinity</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"maxErrors\"</span>: <span class=\"hljs-number\">10</span>\n</code></pre>\n<h3 id=\"esnext\">esnext</h3>\n<p>Attempts to parse your code as ES6 using the harmony version of the esprima parser.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"esnext\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h3 id=\"verbose\">verbose</h3>\n<p>Prepends the name of the offending rule to all error messages.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Default: <code>false</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"verbose\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h3 id=\"esprimaoptions\">esprimaOptions</h3>\n<p>Custom <code>options</code> to be passed to <code>esprima.parse(code, options)</code></p>\n<p>Type: <code>Object</code></p>\n<p>Default: <code>{ &quot;tolerant&quot;: true }</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"esprimaOptions\"</span>: { <span class=\"hljs-string\">\"tolerant\"</span>: <span class=\"hljs-literal\">true</span> }\n</code></pre>\n<h3 id=\"errorfilter\">errorFilter</h3>\n<p>A filter function that determines whether or not to report an error.\nThis will be called for every found error.</p>\n<p>Type: <code>String</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"errorFilter\"</span>: <span class=\"hljs-string\">\"path/to/my/filter.js\"</span>\n</code></pre>\n<p>See <a href=\"https://github.com/jscs-dev/node-jscs/wiki/Error-Filters\">how to define an error filter</a>.</p>\n<h2 id=\"error-suppression\">Error Suppression</h2>\n<h3 id=\"disabling-a-rule\">Disabling a Rule</h3>\n<p>You can specifically disable any rule by ommitting it from your <code>.jscsrc</code> config or by assigning it to null, like so:</p>\n<pre><code class=\"lang-json\">{\n    \"<span class=\"hljs-attribute\">preset</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"jquery\"</span></span>,\n    \"<span class=\"hljs-attribute\">requireCurlyBraces</span>\": <span class=\"hljs-value\"><span class=\"hljs-literal\">null</span>\n</span>}\n</code></pre>\n<h3 id=\"inline-comments\">Inline Comments</h3>\n<p>You can disable and re-enable rules inline with two special comments: <code>// jscs:disable</code> and <code>// jscs:enable</code>. Spacing in these comments is fairly lenient. All of the following are equivalent:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/* jscs: enable */</span>\n<span class=\"hljs-comment\">// jscs: enable</span>\n</code></pre>\n<p>You can use them to disable rules in several ways.</p>\n<h4 id=\"disabling-all-rules\">Disabling All Rules</h4>\n<p>Simply using <code>// jscs:disable</code> or <code>// jscs:enable</code> will disable all rules.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = b;\n<span class=\"hljs-comment\">// jscs:disable</span>\n<span class=\"hljs-keyword\">var</span> c = d; <span class=\"hljs-comment\">// all errors on this line will be ignored</span>\n<span class=\"hljs-comment\">// jscs:enable</span>\n<span class=\"hljs-keyword\">var</span> e = f; <span class=\"hljs-comment\">// all errors on this line will be reported</span>\n</code></pre>\n<h4 id=\"disabling-specific-rules\">Disabling Specific Rules</h4>\n<p>Including a comma separated list of rules to modify after <code>// jscs:disable</code> or <code>// jscs:enable</code> will modify only those rules.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// jscs:disable requireCurlyBraces</span>\n<span class=\"hljs-keyword\">if</span> (x) y(); <span class=\"hljs-comment\">// all errors from requireCurlyBraces on this line will be ignored</span>\n<span class=\"hljs-comment\">// jscs:enable requireCurlyBraces</span>\n<span class=\"hljs-keyword\">if</span> (z) a(); <span class=\"hljs-comment\">// all errors, including from requireCurlyBraces, on this line will be reported</span>\n</code></pre>\n<p>You can enable all rules after disabling a specific rule, and that rule becomes re-enabled as well.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// jscs:disable requireCurlyBraces</span>\n<span class=\"hljs-keyword\">if</span> (x) y(); <span class=\"hljs-comment\">// all errors from requireCurlyBraces on this line will be ignored</span>\n<span class=\"hljs-comment\">// jscs:enable</span>\n<span class=\"hljs-keyword\">if</span> (z) a(); <span class=\"hljs-comment\">// all errors, even from requireCurlyBraces, will be reported</span>\n</code></pre>\n<p>You can disable multiple rules at once and progressively re-enable them.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// jscs:disable requireCurlyBraces, requireDotNotation</span>\n<span class=\"hljs-keyword\">if</span> (x[<span class=\"hljs-string\">'a'</span>]) y(); <span class=\"hljs-comment\">// all errors from requireCurlyBraces OR requireDotNotation on this line will be ignored</span>\n<span class=\"hljs-comment\">// jscs:enable requireCurlyBraces</span>\n<span class=\"hljs-keyword\">if</span> (z[<span class=\"hljs-string\">'a'</span>]) a(); <span class=\"hljs-comment\">// all errors from requireDotNotation, but not requireCurlyBraces, will be ignored</span>\n<span class=\"hljs-comment\">// jscs:enable requireDotNotation</span>\n<span class=\"hljs-keyword\">if</span> (z[<span class=\"hljs-string\">'a'</span>]) a(); <span class=\"hljs-comment\">// all errors will be reported</span>\n</code></pre>\n<h2 id=\"versioning-semver\">Versioning &amp; Semver</h2>\n<p>We recommend installing JSCS via NPM using <code>^</code>, or <code>~</code> if you want more stable releases.</p>\n<p>Semver (<a href=\"http://semver.org/\">http://semver.org/</a>) dictates that breaking changes be major version bumps. In the context of a linting tool, a bug fix that causes more errors to be reported can be interpreted as a breaking change. However, that would require major version bumps to occur more often than can be desirable. Therefore, as a compromise, we will only release bug fixes that cause more errors to be reported in minor versions.</p>\n<p>Below you fill find our versioning strategy, and what you can expect to come out of a new JSCS release.</p>\n<ul>\n<li>Patch release:<ul>\n<li>A bug fix in a rule that causes JSCS to report less errors.</li>\n<li>Docs, refactoring and other &quot;invisible&quot; changes for user;</li>\n</ul>\n</li>\n<li>Minor release:<ul>\n<li>Any preset changes.</li>\n<li>A bug fix in a rule that causes JSCS to report more errors.</li>\n<li>New rules or new options for existing rules that don&#39;t change existing behavior.</li>\n<li>Modifying rules so they report less errors, and don&#39;t cause build failures.</li>\n</ul>\n</li>\n<li>Major release:<ul>\n<li>Purposefully modifying existing rules so that they report more errors or change the meaning of a rule.</li>\n<li>Any architectural changes that could cause builds to fail.</li>\n</ul>\n</li>\n</ul>\n","contributing":"<h1 id=\"contribution-guide\">Contribution Guide</h1>\n<p>Thanks for wanting to contribute! This document describes some points about the contribution process for the JSCS package.</p>\n<ol>\n<li><a href=\"#maintainers\">Maintainers</a></li>\n<li><a href=\"#pull-requests\">Pull Requests</a><ul>\n<li><a href=\"#before-submitting-a-pr\">Before Submitting a PR</a></li>\n<li><a href=\"#why-did-you-close-my-pull-request-or-issue\">Why did you close my PR or Issue?</a></li>\n<li><a href=\"#prissue-closing-criteria\">PR/Issue Closing Criteria</a></li>\n</ul>\n</li>\n<li><a href=\"#filing-bugs\">Filing Bugs</a></li>\n<li><a href=\"#proposing-features\">Proposing Features</a></li>\n<li><a href=\"#implementing-features\">Implementing Features</a></li>\n<li><a href=\"#proposing-additional-presets\">Proposing Additional Presets</a></li>\n<li><a href=\"#setting-up-your-environment\">Setting up Your Environment</a></li>\n<li><a href=\"#commit-message-format\">Commit Message Format</a></li>\n</ol>\n<h2 id=\"maintainers\">Maintainers</h2>\n<p>The maintainers of the project are:</p>\n<ul>\n<li>Marat Dulin (@mdevils).</li>\n<li>Oleg Gaidarenko (@markelog).</li>\n<li>Mike Sherov (@mikesherov).</li>\n<li>Joel Kemp (@mrjoelkemp).</li>\n<li>Alexej Yaroshevich (@zxqfox).</li>\n</ul>\n<p>The project is being developed by the community. Maintainers merge pull-requests and fix critical bugs. All other features\nand patches are welcomed to be implemented by community members.</p>\n<h2 id=\"pull-requests\">Pull-requests</h2>\n<p>If you fixed or added something useful to the project, you can send a pull-request.\nIt will be reviewed by a maintainer and accepted, or commented for rework, or declined.</p>\n<h5 id=\"before-submitting-a-pr\">Before submitting a PR</h5>\n<ol>\n<li>Please review our suggested <a href=\"#commit-message-format\">commit message format</a>.</li>\n<li>Make sure you have tests for your modifications (we use <a href=\"http://visionmedia.github.io/mocha/\">Mocha</a> and <a href=\"http://nodejs.org/api/assert.html\">Assert</a>)<ul>\n<li>Tests for rules are located in <code>test/rules</code></li>\n<li>Tests for presets are located in <code>test/options/preset</code></li>\n</ul>\n</li>\n<li>Run <code>npm test</code> locally to catch any JSHint and JSCS errors.</li>\n</ol>\n<h5 id=\"why-did-you-close-my-pull-request-or-issue-\">Why did you close my pull request or issue?</h5>\n<p>Nothing is worse than a project with hundreds of stale issues. To keep things orderly, the maintainers try to\nclose/resolve issues as quickly as possible.</p>\n<h5 id=\"pr-issue-closing-criteria\">PR/Issue closing criteria</h5>\n<p>We&#39;ll close your PR or issue if:</p>\n<ol>\n<li>It&#39;s a duplicate of an existing issue</li>\n<li>Outside of the style-driven scope of the project</li>\n<li>You are unresponsive after a few days</li>\n<li>The bug is not reproducible</li>\n<li>The feature request or rule modification request introduces too much complexity (or too many edge cases) to the tool<ul>\n<li>We weigh a request&#39;s complexity with the value it brings to the community.</li>\n</ul>\n</li>\n</ol>\n<p>Please do not take offense if your ticket is closed. We&#39;re only trying to keep the number of issues manageable.</p>\n<h2 id=\"filing-bugs\">Filing Bugs</h2>\n<p>If you found an error, typo, or any other flaw in the project,\nplease report it using <a href=\"https://github.com/jscs-dev/node-jscs/issues\">GitHub Issues</a>. Try searching\nthe issues to see if there is an existing report of your bug or feature request.</p>\n<p>When it comes to bugs, the more details you provide, the easier it is to reproduce the issue and the faster it could be fixed.</p>\n<p>Some helpful datapoints to provide (if you can):</p>\n<ol>\n<li>Specific rules that that have issues (<code>jscs --verbose</code> helps with this)</li>\n<li>A failing test would be amazing</li>\n<li>Code snippets that make jscs exhibit the issue</li>\n<li>The version of jscs that you&#39;re using</li>\n<li>Your operating system (Windows, Mac, or Linux)</li>\n<li>Screenshots</li>\n</ol>\n<p>Unfortunately, sometimes a bug can only be reproduced in your project or in your environment,\nso the maintainers cannot reproduce it. In this case we welcome you to try fixing the bug; we&#39;ll be more than happy to\ntake a look at (and possibly incorporate) the fix.</p>\n<h2 id=\"proposing-features\">Proposing Features</h2>\n<p>If you&#39;ve got an idea for a new feature, file an issue providing some details on your idea.</p>\n<p>If it&#39;s a new rule that you&#39;re proposing:</p>\n<ul>\n<li>Provide the possible configuration inputs<ul>\n<li>Look at the rules in the readme for examples</li>\n</ul>\n</li>\n<li>You&#39;ll also have to think about (and implement) the reverse rule (Before|After) or (Require|Disallow)</li>\n<li>Provide snippets to show code that your rule deems as valid and invalid.<ul>\n<li>Check out the readme for examples</li>\n</ul>\n</li>\n</ul>\n<p>If you&#39;d like to modify the possible values for existing rules:</p>\n<ul>\n<li>Provide code snippets showing the need for additional configuration values</li>\n</ul>\n<h2 id=\"implementing-features\">Implementing Features</h2>\n<p>It&#39;s likely that you&#39;ll have to implement feature requests or enhancements on your own. To do that, you&#39;ll need\nto be comfortable with JavaScript, Promises, Node.js, and familiar with <a href=\"http://esprima.org/demo/parse.html#\">Esprima&#39;s abstract syntax tree format</a>.</p>\n<p>To understand how JSCS works, the best place to start is in the <code>lib/</code> directory: starting with <code>lib/cli.js</code>\n(to see the processing flow when <code>jscs</code> is invoked in the terminal) then going to <code>lib/checker.js</code> and <code>lib/string-checker.js</code>\nfor understanding how JSCS checks files. The <code>lib/js-file.js</code> and <code>lib/errors.js</code> contain the internal data structures.</p>\n<p>All of the rules are located in <code>lib/rules</code> and the tests for the rules are in <code>test/rules</code>.</p>\n<p>If you cannot implement the feature, but you feel that it would be helpful to others, you can create an issue on GitHub.\nIf the maintainers feel that the issue satisfies our <a href=\"#prissue-closing-criteria\">criteria for closing issues</a>, your issue\nwill be closed with a genuine thank you and an explanation for the closure.</p>\n<h2 id=\"proposing-additional-presets\">Proposing Additional Presets</h2>\n<p>If you&#39;d like to add an additional preset, please add the following (maintaining alphabetical order when possible):</p>\n<ul>\n<li>The new preset&#39;s configuration to <code>/presets</code></li>\n<li>A file containing sample code, including any necessary license (ideally from that organization/project&#39;s codebase) to <code>/test/data/options/preset/</code></li>\n<li>An integration test by adding the line <code>testPreset(&#39;mynewpreset&#39;);</code> to <code>/test/string-checker.js</code></li>\n<li>The presets name to the possible values of the preset option in OVERVIEW.md</li>\n<li>A link to the preset following the existing style in the &quot;Presets&quot; section of OVERVIEW.md</li>\n</ul>\n<h2 id=\"setting-up-your-environment\">Setting up your environment</h2>\n<ol>\n<li>Fork the node-jscs repository</li>\n<li>Clone your fork to your local machine</li>\n<li>Run <code>npm install</code> in your local fork</li>\n<li>Consider setting up the appropriate <a href=\"https://github.com/jscs-dev/node-jscs#friendly-packages\">JSCS editor package</a><ul>\n<li>We use JSCS to check the JSCS codebase</li>\n</ul>\n</li>\n<li>Create a new branch for your fix: <code>git checkout -b my-fix-branch master</code></li>\n<li>Implement your bug fix or feature request</li>\n<li>Implement the tests for your fix or feature</li>\n<li>Run <code>npm test</code> frequently to find stylistic errors before issuing a PR</li>\n<li>Commit your code with a commit message that follows our <a href=\"#commit-message-format\">commit message format</a><ul>\n<li>If you don&#39;t feel comfortable with that format, no worries, we&#39;ll fix up your commit after merging your PR.</li>\n<li>Try to have a single commit per modified/added rule</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"commit-message-format\">Commit Message Format</h2>\n<p>We adhere to the <a href=\"http://contribute.jquery.org/commits-and-pull-requests/#commit-guidelines\">jQuery commit message</a> guidelines.</p>\n<p>This format can be achieved via:</p>\n<ul>\n<li><code>git commit</code> to open your editor to create a multi-line commit message</li>\n</ul>\n<pre><code>&lt;rulename&gt;: short message\n&lt;emptyline&gt;\nLong description (if useful)\n&lt;emptyline&gt;\nCloses gh-&lt;pullRequestNumber&gt;\nFixes #&lt;issueNumber&gt;\n</code></pre><p>Example:</p>\n<pre><code>validateIndentation: remove array and object indentation validation\n\nFixes #627 - issue\nCloses gh-545 - pull request\n</code></pre><p>You can find other examples of this format by <a href=\"https://github.com/jscs-dev/node-jscs/commits/master\">viewing recent commits</a> made to master.</p>\n","changelog":"<h2 id=\"version-1-13-1\">Version 1.13.1</h2>\n<h3 id=\"overview\">Overview</h3>\n<p>Small update for fix distribution of the <code>--esnext</code> CLI option (#1321)</p>\n<h3 id=\"bug-fixes\">Bug fixes</h3>\n<ul>\n<li>CLI: use &quot;esnext&quot; cli option in the configuration module (Oleg Gaidarenko)</li>\n<li>CLI: ensure options to path.resolve are strings (Jason Karns)</li>\n<li>disallowMultipleSpaces: fix configuration error message (Marc Knaup)</li>\n</ul>\n<h3 id=\"docs\">Docs</h3>\n<ul>\n<li>Docs: correct example for the &quot;requireCapitalizedComments&quot; rule (XhmikosR)</li>\n<li>Docs: Update mixup between rules in docstring example (Jérémie Astori)</li>\n<li>Docs: Fix missing quotes in a docstring example (Jérémie Astori)</li>\n</ul>\n<h2 id=\"version-1-13-0\">Version 1.13.0</h2>\n<h3 id=\"overview\">Overview</h3>\n<p>This is mostly an incremental update, which includes important fixes for annoyances like <code>npm ERR! EEXIST, symlink</code> error at <code>npm install</code>. We also improved ES6 support, added seven new rules, three new rule values and now you can declare <code>verbose</code> option at the config.</p>\n<p>There are no preset updates in this release, but if you feel that rules are missing in\nthe supported <a href=\"http://jscs.info/overview.html#presets\">presets</a> - please send us a PR.</p>\n<p>We eagerly wait for the Esprima 2.3 release, since soon after, <code>esnext</code> option will be set to <code>true</code> by default.</p>\n<p>We would like specifically thanks @TheSavior and @hzoo for their hard work on this release.</p>\n<h3 id=\"new-options\">New options</h3>\n<ul>\n<li>New option: add &quot;verbose&quot; option as a config option (Oleg Gaidarenko)</li>\n</ul>\n<h3 id=\"new-rules\">New rules</h3>\n<ul>\n<li>New rule: validateAlignedFunctionParameters (Bram Cordie)</li>\n<li>New rule: (disallow|require)PaddingNewLinesBeforeExport (Eli White)</li>\n<li>New rule: validateNewlineAfterArrayElements (Alexej Yaroshevich)</li>\n<li>New rule: (require |disallow)NamedUnassignedFunctions (Todd Wolfson)</li>\n<li>New rule: maximumNumberOfLines (Henry Zhu)</li>\n<li>New rule: (disallow|require)PaddingNewLinesAfterUseStrict (Eli White)</li>\n<li>New rule: disallowNotOperatorsInConditionals (Henry Zhu)</li>\n</ul>\n<h3 id=\"new-rule-values\">New rule values</h3>\n<ul>\n<li>requirePaddingNewLinesAfterBlocks: add exceptions (Eli White)</li>\n<li>requireSpaceBeforeBlockStatements: add number of spaces argument (Oleg Pesok)</li>\n<li>requireDollarBeforejQueryAssignment: add &quot;ignoreProperties&quot; rule value (Alexej Yaroshevich)</li>\n</ul>\n<h3 id=\"bug-fixes\">Bug fixes</h3>\n<ul>\n<li>paddingNewLinesBeforeLineComments: code and comment on the same line (Oleg Gaidarenko)</li>\n<li>disallowKeywordsOnNewLine: &quot;do..while&quot; on new line (oredi)</li>\n<li>requirePaddingNewLinesBeforeLineComments: first token and not first line (Eli White)</li>\n<li>Errors: should not show rule for &quot;Unsupported rule&quot; error (Oleg Gaidarenko)</li>\n<li>requireOperatorBeforeLineBreak: autofix by moving operator (Nick Santos)</li>\n<li>disallowIdentifierNames: fix errors with using object properties as an identifier (Henry Zhu)</li>\n<li>requireDollarBeforejQueryAssignment: Allow leading underscores before $ sign (Eli White)</li>\n<li>requireCamelCaseOrUpperCaseIdentifiers: skip es5 getters if ignoreProperties is set (Alexej Yaroshevich)</li>\n<li>requireSemicolons: fix warning positions (Roman Dvornov)</li>\n<li>requireMultipleVarDecl: fix switch statement case (Todd Wolfson)</li>\n<li>paddingNewLineAfterVariableDeclaration: simlification and more tests (Oleg Gaidarenko)</li>\n<li>paddingNewLineAfterVariableDeclaration: add check for let and const (Martin Kolárik)</li>\n<li>paddingNewLineAfterVariableDeclaration: do not trip off on the semicolon (Oleg Gaidarenko)</li>\n<li>paddingNewLinesAfterBlocks: ease up on function calls (Oleg Gaidarenko)</li>\n<li>requirePaddingNewLineAfterVariableDeclaration: allow exception (Henry Zhu)</li>\n<li>requireLineBreakAfterVariableAssignment: add check for let and const (Henry Zhu)</li>\n<li>requireCapitalizedComments: handle textblocks correctly (Martin Kolárik)</li>\n</ul>\n<h3 id=\"misc\">Misc</h3>\n<ul>\n<li>js-file: small JSDoc improvement (Oleg Gaidarenko)</li>\n<li>Tests: fix node-style-guide preset (Martin Kolárik)</li>\n<li>Utils: add &quot;true&quot; and &quot;false&quot; to list of reserved words (Dmitry Sorin)</li>\n<li>Update esprima-harmony version (Oleg Gaidarenko)</li>\n<li>Tests: Add a test helper for asserting errors and autofix (Eli White)</li>\n<li>disallowKeywordsOnNewLine: make jshint happy (Oleg Gaidarenko)</li>\n<li>disallowMultipleVarDecl: add test for var inside switch clause (Alexej Yaroshevich)</li>\n<li>errors: additional tests, coverage (Alexej Yaroshevich)</li>\n<li>string-checker: wrap rule.check into try-catch (Alexej Yaroshevich)</li>\n<li>errors: fix test flow with filtering (Alexej Yaroshevich)</li>\n</ul>\n<h3 id=\"docs\">Docs</h3>\n<ul>\n<li>Docs: add link to overcommit under &quot;Friendly packages&quot; (Joe Lencioni)</li>\n<li>Docs: add a message to mention the verbose option (Henry Zhu)</li>\n<li>Docs: clarify that CLI options can be used in the config (Henry Zhu)</li>\n<li>Docs: clarify that disallowMultipleSpaces matches tabs and spaces (Henry Zhu)</li>\n<li>Docs: clarify how to disable a rule and use a config file (Henry Zhu)</li>\n<li>Docs: Clarify behavior of requireCamelCaseOrUpperCaseIdentifiers (Henry Zhu)</li>\n<li>Docs: fix disallowMultipleSpaces rule name in CHANGELOG (Alexej Yaroshevich)</li>\n<li>Docs: add two new presets to list of preset values (Jed Wood)</li>\n<li>Docs: add link to the preset option from the list of presets (Steve Lee)</li>\n<li>Docs: add shorten flags to cli (Henry Zhu)</li>\n<li>Docs: add auto fix option to cli docs (Henry Zhu)</li>\n<li>Docs: fix disallowMultipleSpaces invalid example (Henry Zhu)</li>\n<li>Docs: fix various docs typos (Eli White)</li>\n</ul>\n<h2 id=\"version-1-12-0\">Version 1.12.0</h2>\n<h3 id=\"overview\">Overview</h3>\n<p>Ladies and Gentlemen... Elvis is in the building - auto-fixing is finally here! We were working really hard to make this powerful new feature, and to make it right. We&#39;re hoping it will truly help make your code look good.</p>\n<p>Auto-fixing supports the <a href=\"http://jscs.info/rules.html#requirelinefeedatfileend\">EOF rule</a> and all rules related to spacing, including <a href=\"http://jscs.info/rules.html#validateindentation\">validateIndentation</a> which is the most complicated rule we have (big thanks to @mikesherov for making that happen). </p>\n<p>Although this chunk of rules covers most of the popular use-cases, we&#39;re determine to add more rules to this list, please help us out and report any bugs or consider contributing with some code - <a href=\"http://jscs.info/contributing.html\">http://jscs.info/contributing.html</a>. We&#39;re really friendly to every new contributor.</p>\n<p>Apart from auto-fixing, there are six new rules – fresh out of the oven. Special thanks goes to @lahmatiy, who had the patience and perseverance to implement <a href=\"http://jscs.info/rules.html#requiresemicolons\"><code>requireSemicolons</code></a>.</p>\n<p>Because of tireless efforts of @hzoo, we&#39;re adding two new presets in this release - <a href=\"https://github.com/felixge/node-style-guide\"><code>node-style-guide</code></a> and <a href=\"https://make.wordpress.org/core/handbook/coding-standards/javascript\"><code>wordpress</code></a>. They have pretty consistent style guides... try it out; They are a breeze to work with.</p>\n<p>We&#39;re very grateful to everyone who helped out with this release, especially to @TheSavior who helped review the pull requests and shape out our API.</p>\n<h3 id=\"preset-updates\">Preset updates</h3>\n<ul>\n<li>Preset: remove &quot;requireMultipleVarDecl&quot; rule from jquery preset (Oleg Gaidarenko)</li>\n<li>Preset: wordpress (Henry Zhu)</li>\n<li>Preset: Add &quot;requireSemicolons&quot; rule to the Yandex preset (ikokostya)</li>\n<li>Preset: Add validate indentation rule for Yandex (Gunnar Lium)</li>\n<li>Preset: node-style-guide (Henry Zhu)</li>\n<li>Preset: update airbnb preset (Eli White)</li>\n<li>Preset: require blank line before all line comments for jQuery preset (Eli White)</li>\n<li>Preset: Add &quot;requireSpaceBeforeObjectValues&quot; to crockford test (Jackson Ray Hamilton)</li>\n</ul>\n<h3 id=\"auto-fixing\">Auto-fixing</h3>\n<ul>\n<li>validateIndentation: autofixing! (Mike Sherov)</li>\n<li>TokenAssert: only fix lines when comments do not exist between tokens (Mike Sherov)</li>\n<li>disallowMultipleLineString: do not yet allow autofixing, which is a non-whitespace change (Mike Sherov)</li>\n<li>disallowSemicolons: do not yet allow autofixing, which is a non-whitespace change (Mike Sherov)</li>\n<li>Autofixing: add more rules to use assertion framework (Henry Zhu)</li>\n<li>Autofixing: make most rules use assertion framework when possible (Eli White)</li>\n<li>Autofixing: initial implementation (mdevils)</li>\n<li>Autofixing: token data (mdevils)</li>\n</ul>\n<h3 id=\"new-rules\">New rules</h3>\n<ul>\n<li>New Rule: requireSemicolons (Roman Dvornov)</li>\n<li>New Rule: disallowMultipleSpaces (Todd Wolfson)</li>\n<li>New Rule: disallowIdentifierNames (alawatthe)</li>\n<li>New Rule: requirePaddingNewLineAfterVariableDeclaration (Evan Jacobs)</li>\n<li>New Rule: requireDollarBeforejQueryAssignment (Eli White)</li>\n<li>New Rules: (disallow/require)PaddingNewLinesBeforeLineComments (Eli White)</li>\n</ul>\n<h3 id=\"rule-values\">Rule Values</h3>\n<ul>\n<li>requireCapitalizedComments: Add <code>allExcept</code> option (Ash Clarke)</li>\n</ul>\n<h3 id=\"auto-configuration\">Auto-configuration</h3>\n<ul>\n<li>Auto-Configuration: show error count when handling violated rules (fubu)</li>\n<li>Auto-Configuration: show number of violated rules (fubu)</li>\n</ul>\n<h3 id=\"cli\">CLI</h3>\n<ul>\n<li>CLI: simplify and increase coverage of &quot;cli-config&quot; module (Oleg Gaidarenko)</li>\n<li>CLI: increase coverage of the &quot;cli&quot; module (Oleg Gaidarenko)</li>\n</ul>\n<h3 id=\"bug-fixes\">Bug fixes</h3>\n<ul>\n<li>(require|disallow)spacesIn*: add more invalid examples and fixes for rules (Henry Zhu)</li>\n<li>disallowSpacesInsideArrayBrackets: fix error messages (Henry Zhu)</li>\n<li>requireSpacesInsideArrayBrackets: comments should be also taken into account (gero3)</li>\n<li>disallowSpaceBeforeBinaryOperators: comments are allowed (gero3)</li>\n<li>requireLineBreakAfterVariableAssignment: allow exception for init part of for loop (Henry Zhu)</li>\n<li>(require|disallow)SpacesInsideArrayBrackets: use includeComments in token (Henry Zhu)</li>\n<li>disallowAnonymousFunctions: remove errant &quot;s&quot; from error message (James Chin)</li>\n<li>disallowDanglingUnderscores: Corrected rule name in assert message (Oswald Maskens)</li>\n<li>Parsing: Extend estraverse rules to support both XJS and JSX (Henry Zhu)</li>\n<li>(disallow/require)PaddingNewLinesAfterBlocks: Ignoring the end of files (Eli White)</li>\n<li>requirePaddingNewLinesBeforeLineComments: Allow consecutive comments and firstAfterCurly exception (Eli White)</li>\n</ul>\n<h3 id=\"misc\">Misc</h3>\n<ul>\n<li>disallowSpacesInsideParentheses: fix es6 template literal token issues (Mike Sherov)</li>\n<li>RequireAlignedObjectValues: use assertions (Mike Sherov)</li>\n<li>DisallowMultipleLineBreaks: use assertions (Mike Sherov)</li>\n<li>Tests: Move to spec folder (Joel Kemp)</li>\n<li>Tests: Adding some more fix tests (Eli White)</li>\n<li>Tests: move specs into a subdir so that tests, fixtures, and utilities aren&#39;t intermingled (Mike Sherov)</li>\n<li>Misc: update dependencies (Oleg Gaidarenko)</li>\n<li>JsFile: Make getTokens include comments (Eli White)</li>\n<li>Assertions: Add fixing tests to several rules (Eli White)</li>\n<li>Assertions: add tests for linesBetween (Mike Sherov)</li>\n<li>Assertions: Make sure newlines get fixed (gero3)</li>\n<li>TokenAssert: remove newline fixing logic duplication to prepare for further fixes (Mike Sherov)</li>\n<li>TokenAssert: simplify and strengthen linesBetween rules (Mike Sherov)</li>\n<li>Token Assert: normalize whiteSpace assertions to match line assertions (Mike Sherov)</li>\n<li>requireLineFeedAtFileEnd: make use of assert (gero3)</li>\n<li>Don&#39;t trim whitespace in markdown-files (Simen Bekkhus)</li>\n<li>Cleanup: use this.getOptionName() for consistency, options variable (Henry Zhu)</li>\n<li>Cleanup: use iterateTokensByTypeAndValue where appropriate (Mike Sherov)</li>\n<li>Cleanup: remove archaic functions from JsFile (Mike Sherov)</li>\n<li>Cleanup: remove usage of getComment(After|Before)Token (Mike Sherov)</li>\n<li>Cleanup: remove redundant boolean check, use consistent error messages (Henry Zhu)</li>\n<li>Cleanup: use iterateTokensByTypeAndValue and this.getOptionName() (Henry Zhu)</li>\n<li>requireSpaceAfterKeywords: use token assert (Henry Zhu)</li>\n<li>JsFile::getFirstTokenOnLine implementation (for indentation rules) (mdevils)</li>\n<li>Replaces the &#39;colors&#39; and &#39;supports-colors&#39; packages with &#39;chalk&#39;. (Joshua Appelman)</li>\n<li>Fix various doc typos (Jérémie Astori)</li>\n<li>requirePaddingNewLinesAfterBlockDeclarations / disallowPaddingNewLinesAfterBlockDeclarations Adding an option to specify lines for errors.assert.differentLine (Eli White)</li>\n<li>JsFile: add getLineBreaks function to support future whitespace fixes (Mike Sherov)</li>\n<li>Appveyor: freeze node version to 0.12.x (Alexej Yaroshevich)</li>\n<li>requireCapitalizedComments: automatically except <code>jscs</code> comments (James Reggio)</li>\n</ul>\n<h3 id=\"docs\">Docs</h3>\n<ul>\n<li>Docs: Change &quot;Values&quot; and &quot;Types&quot; to grammatically correct forms (Shmavon Gazanchyan)</li>\n<li>Docs: add reporter (sanemat)</li>\n<li>Docs: less.js uses jscs (Bass Jobsen)</li>\n<li>Docs: added Goodvidio to the list of adopters (Adonis K)</li>\n<li>Fix types and descriptions in documentation (Shmavon Gazanchyan)</li>\n</ul>\n<h2 id=\"version-1-11-3\">Version 1.11.3</h2>\n<h3 id=\"bug-fixes\">Bug Fixes</h3>\n<ul>\n<li>JsFile: ensure getLinesWithCommentsRemoved does not alter future getComments calls. (Mike Sherov)</li>\n</ul>\n<h3 id=\"misc-\">Misc.</h3>\n<ul>\n<li>modules/utils normalizePath: fixed test for windows env (Alexej Yaroshevich)</li>\n</ul>\n<h2 id=\"version-1-11-2\">Version 1.11.2</h2>\n<h3 id=\"bug-fixes\">Bug Fixes</h3>\n<ul>\n<li>validateIndentation: ignore empty module bodies (Mike Sherov)</li>\n<li>Object rules: ignore ES5 getters/setters when appropriate. (Mike Sherov)</li>\n<li>Ensure esprimaOptions is not mistaken for a rule (Yannick Croissant)</li>\n</ul>\n<h3 id=\"infrastructure-changes\">Infrastructure Changes</h3>\n<ul>\n<li>CI: Add AppVeyor (Adeel)</li>\n</ul>\n<h3 id=\"misc-\">Misc.</h3>\n<ul>\n<li>Add @zxqfox to the list of maintainers (mdevils)</li>\n</ul>\n<h2 id=\"version-1-11-1\">Version 1.11.1</h2>\n<h3 id=\"new-rules-rule-values\">New Rules / Rule Values</h3>\n<ul>\n<li>disallowSpaceAfterObjectKeys: implement ignoreSingleLine and ignoreMultiLine options (Henry Zhu)</li>\n</ul>\n<h3 id=\"bug-fixes\">Bug Fixes</h3>\n<ul>\n<li>disallowAllowSpacesInsideParentheses: reintroduce archaic &quot;all&quot; config option (Mike Sherov)</li>\n<li>requireSpaceBetweenArguments: loosen rule restriction (Mike Sherov)</li>\n<li>Object Key rules: ignore method syntax (Alexej Yaroshevich)</li>\n<li>(require|disallow)TrailingComma: fixed error location (Alexej Yaroshevich)</li>\n</ul>\n<h3 id=\"infrastructure-changes\">Infrastructure Changes</h3>\n<ul>\n<li>Auto-generate: Move promisify to utils (Joel Kemp)</li>\n</ul>\n<h3 id=\"misc-\">Misc.</h3>\n<ul>\n<li>JSHint: add unused true (Mike Sherov)</li>\n<li>Updating rules to use File Traversal APIs. (Eli White)</li>\n<li>Docs: Add website rebuild instructions to maintenance (Mike Sherov)</li>\n</ul>\n<h2 id=\"version-1-11-0\">Version 1.11.0</h2>\n<h3 id=\"preset-updates\">Preset Updates</h3>\n<ul>\n<li>Preset: add &quot;requireSpaceBetweenArguments&quot; rule to all presets (Oleg Gaidarenko)</li>\n<li>Presets: Remove use of outdated validateJSDoc rule (Joel Kemp)</li>\n<li>Preset: Add &quot;requireSpacesInsideParentheses&quot; to jquery preset (Oleg Gaidarenko)</li>\n<li>Preset: switch multipleVarDecl rule in airbnb preset (Martin Bohal)</li>\n<li>Preset: change value of &quot;requireDotNotation&quot; rule for jquery preset (Oleg Gaidarenko)</li>\n</ul>\n<h3 id=\"new-config-options\">New Config Options</h3>\n<ul>\n<li>Configuration: Auto-generation (Joel Kemp)</li>\n<li>Config: Add support for custom Esprima options. (Chris Rebert)</li>\n</ul>\n<h3 id=\"new-rules-rule-values\">New Rules / Rule Values</h3>\n<ul>\n<li>New Rule: disallowKeywordsInComments (Joe Sepi)</li>\n<li>New Rules: (require|disallow)SpacesInsideBrackets (Mike Sherov)</li>\n<li>validateIndentation: new rule value - includeEmptyLines (Jonathan Gawrych)</li>\n<li>disallowTrailingWhitespace: new rule value - ignoreEmptyLines (Jonathan Gawrych)</li>\n<li>New Rule: disallowCurlyBraces (Henry Zhu)</li>\n<li>requireCapitalizedConstructors: accept list of exempt constructors (Sam L&#39;ecuyer)</li>\n<li>validateIndentation: exception to indentation rules for module pattern (Mike Sherov)</li>\n</ul>\n<h3 id=\"bug-fixes\">Bug Fixes</h3>\n<ul>\n<li>(require|disallow)SpacesInsideArrayBrackets: only check for ArrayExpressions (Mike Sherov)</li>\n<li>JsFile: remove all duplicate tokens. (Mike Sherov)</li>\n<li>ObjectExpression Rules: take into account shorthand syntax. (Mike Sherov)</li>\n<li>disallowSpaceBeforeKeywords: don&#39;t report an error on back-to-back keywords (Mike Sherov)</li>\n<li>requireParenthesesAroundIIFE: fix crash on semicolon-free IIFE (Yuheng Zhang)</li>\n<li>Parsing: tolerate non-leading import statements (Chris Rebert)</li>\n<li>requireCapitalizedComments: improve letter recognition (Mathias Bynens)</li>\n<li>requireSpaces*: fix error message to &#39;Exactly one space required&#39; (Henry Zhu)</li>\n<li>StringChecker: leading hashbangs should still report correct error line numbers (Mike Sherov)</li>\n<li>validateIndentation: don&#39;t check bracelets else indentation. (Mike Sherov)</li>\n<li>validateIndentation: don&#39;t consider return when classifying break indentation (Mike Sherov)</li>\n<li>validateIndentation: fix multiline while in doWhile statements (Mike Sherov)</li>\n<li>validateIndentation: ensure pushes and pops are matching (Mike Sherov)</li>\n<li>validateIndentation: ensure semicolon free indentations are on correct line (Mike Sherov)</li>\n<li>SpaceBetweenArguments: catch call expression arguments (Oleg Gaidarenko)</li>\n<li>token-assert: add check for document start to prevent crashes (Alexej Yaroshevich)</li>\n<li>requireSpaceBeforeBlockStatements: reworded an error message (Alexej Yaroshevich)</li>\n</ul>\n<h3 id=\"infrastructure-changes\">Infrastructure Changes</h3>\n<ul>\n<li>js-file: added getCommentAfter/BeforeToken functions (Alexej Yaroshevich)</li>\n<li>cleanup: remove lib/token-helper (Mike Sherov)</li>\n<li>JsFile: move getLinesWithCommentsRemoved from comment-helper (Mike Sherov)</li>\n</ul>\n<h3 id=\"misc-\">Misc.</h3>\n<ul>\n<li>disallowSpacesInsideArrayBrackets: fix rule name in example (Gustavo Henke)</li>\n<li>Misc: update dependencies (Oleg Gaidarenko)</li>\n<li>various rules: use tokenAssert (Henry Zhu)</li>\n<li>Speed up builds by using Docker-based Travis CI (Pavel Strashkin)</li>\n<li>100% code coverage on various files(Mike Sherov)</li>\n<li>disallowSpace(Before | After)Keywords: more tests (Alexej Yaroshevich)</li>\n<li>requireCurlyBrace: more tests (Alexej Yaroshevich)</li>\n<li>CLI: correct JSDoc comment (Oleg Gaidarenko)</li>\n<li>requireQuotedKeysInObjects: fixing file permissions (Joe Sepi)</li>\n<li>Changelog: correct version number (Oleg Gaidarenko)</li>\n<li>Docs: add missed commit to the changelog (Oleg Gaidarenko)</li>\n<li>Misc: .editorconfig - fix for invalid indent_style value (Dmitriy Schekhovtsov)</li>\n<li>Update regenerate to ~1.2.1 (Chris Rebert)</li>\n<li>Add description to commander CLI help (Chris Rebert)</li>\n</ul>\n<h2 id=\"version-1-10-0\">Version 1.10.0</h2>\n<ul>\n<li>Preset: correct wikimedia preset test (Oleg Gaidarenko)</li>\n<li>Preset: correct jquery preset test (Oleg Gaidarenko)</li>\n<li>Preset: add disallowKeywordsOnNewLine rule to google preset (Oleg Gaidarenko)</li>\n<li>Preset: add &quot;requireSpacesInForStatement&quot; rule to the presets (Oleg Gaidarenko)</li>\n<li><p>Preset: add &#39;catch&#39; to &quot;disallowKeywordsOnNewLine&quot; rule for wikimedia (James Forrester)</p>\n</li>\n<li><p>disallowSpacesInForStatement: Disallow spaces in between for statement (gero3)</p>\n</li>\n<li>requireSpacesInForStatement: Requires spaces inbetween for statement (gero3)</li>\n<li><p>New rule: requireQuotedKeysInObjects (hpshelton)</p>\n</li>\n<li><p>disallowSpacesInsideObjectBrackets: implement &quot;allExcept&quot; option (Oleg Gaidarenko)</p>\n</li>\n<li>requireSpacesInsideObjectBrackets: implement &quot;allExcept&quot; option (Oleg Gaidarenko)</li>\n<li>disallowSpacesInsideArrayBrackets: implement &quot;allExcept&quot; option (Oleg Gaidarenko)</li>\n<li>requireSpacesInsideArrayBrackets: implement &quot;allExcept&quot; option (Oleg Gaidarenko)</li>\n<li><p>requireDotNotation: new rule value - except_snake_case (Alexej Yaroshevich)</p>\n</li>\n<li><p>Configuration: ability to specify and query es3/es6 support in files. (Mike Sherov)</p>\n</li>\n<li><p>cli-config: add &quot;getReporter&quot; method (Oleg Gaidarenko)</p>\n</li>\n<li><p>requireSpaceBeforeBlockStatements: fix for else statement (Oleg Gaidarenko)</p>\n</li>\n<li>disallowSpaceBeforeBlockStatements: fix for else statement (Beau Gunderson)</li>\n<li>disallowKeywordsOnNewLine: add special case for &quot;else&quot; without braces (Oleg Gaidarenko)</li>\n<li>validateIndentation: fix bug with anonymous function return in switch case (Mike Sherov)</li>\n<li>validateIndentation: fix bug with brace-less if in a switch case. (Mike Sherov)</li>\n<li>validateIndentation: fix bug with indentation of bare blocks. (Mike Sherov)</li>\n<li>disallowSpaceAfterBinaryOperators: report correct operator error (Oleg Gaidarenko)</li>\n<li>requireSpaceAfterBinaryOperators: report correct operator error (Oleg Gaidarenko)</li>\n<li>Fixes #909 (wrong type for disallow-capitalized-comments) (alawatthe)</li>\n<li>token-assert: add guards for token and subjectToken properties (Oleg Gaidarenko)</li>\n<li>ESNext: update esprima to properly parse regex tokens (Mike Sherov)</li>\n<li>requireNewlineBeforeBlockStatements: add guard for the first symbol (Oleg Gaidarenko)</li>\n<li>disallowNewlineBeforeBlockStatements: add guard for the first symbol (Oleg Gaidarenko)</li>\n<li>requireDotNotation: require dots for es3 keywords when not in es3 mode (Mike Sherov)</li>\n<li>JsFile: make getNodeByRange check condition less strict (gero3)</li>\n<li>requireSpacesInConditionalExpression: notice parentheses (Alexej Yaroshevich)</li>\n<li>disallowSpacesInConditionalExpression: notice parentheses (Alexej Yaroshevich)</li>\n<li>requirePaddingNewlinesBeforeKeywords: add token exceptions (jdlrobson)</li>\n<li><p>requireLineBreakAfterVariableAssignment: fix edge cases (jdlrobson)</p>\n</li>\n<li><p>Docs: various readme fixes (Oleg Gaidarenko)</p>\n</li>\n<li>Docs: improve &quot;excludeFiles&quot; documentation (Alex Yaroshevich)</li>\n<li>Docs: Fixed level for 1.9.0 to be the same as for 1.8.x (Alexander Artemenko)</li>\n<li><p>README: Fix Bootstrap&#39;s name (Chris Rebert)</p>\n</li>\n<li><p>requireOperatorBeforeLineBreak: Use the new assertion framework (hpshelton)</p>\n</li>\n<li>cli-config: add JSDoc for exposed methods (Oleg Gaidarenko)</li>\n<li>(require | disallow)SpacesInsideObjectBrackets: add bunch of newlines (Oleg Gaidarenko)</li>\n<li>Misc: make jscs happy (Oleg Gaidarenko)</li>\n<li>disallowSpaceBeforeBlockStatements: correct test names (Oleg Gaidarenko)</li>\n<li>disallowSpaceBeforeBlockStatements: use assertion API (Oleg Gaidarenko)</li>\n<li>requireKeywordsOnNewLine: use assertion API (Oleg Gaidarenko)</li>\n<li>Misc: complitly replace hooker with sinon (Oleg Gaidarenko)</li>\n<li>CLI: correct tests for the &quot;reporter&quot; option (Oleg Gaidarenko)</li>\n<li>(require | disallow)NewlineBeforeBlockStatements: remove needless guards (Oleg Gaidarenko)</li>\n<li>(require | disallow)NewlineBeforeBlockStatements: use assertion API (Nicholas Bartlett)</li>\n<li>Move website to a different repo (mdevils)</li>\n<li>utils: add isSnakeCased, trimUnderscores methods (Alexej Yaroshevich)</li>\n<li>requireSpace(Before|After)BinaryOperators: Add tests for error column (hpshelton)</li>\n<li>modules/checker: call spy.restore() after assertions in checkStdin (Alexej Yaroshevich)</li>\n<li>Misc: correct file flags - chmod -x (Oleg Gaidarenko)</li>\n<li>Build: update dependencies (Oleg Gaidarenko)</li>\n</ul>\n<h2 id=\"version-1-9-0\">Version 1.9.0</h2>\n<ul>\n<li>Preset: update wikimedia preset (Timo Tijhof)</li>\n<li><p>Preset: update crockford preset (Jackson Ray Hamilton)</p>\n</li>\n<li><p>New Rules: (require | disallow)SpaceBetweenArguments (James Allardice)</p>\n</li>\n<li>New Rules: requireLineBreakAfterVariableAssignment (jdlrobson)</li>\n<li><p>New Rules: disallowSemicolons (Christopher Cliff)</p>\n</li>\n<li><p>CLI: relative path resolving fix (mdevils)</p>\n</li>\n<li>requireCurlyBraces: correctly set error pointer (Oleg Gaidarenko)</li>\n<li>requireOperatorBeforeLineBreak: Detect binary operator after literal (Lucas Cimon)</li>\n<li><p>requireCapitalizedComments: correct letter recognition (alawatthe)</p>\n</li>\n<li><p>CLI: Remove duplicated error reporting code paths (Mike Sherov)</p>\n</li>\n<li>CLI: remove duplicated preset existence check (Mike Sherov)</li>\n<li>Iterator: extend estraverse rules to support JSX (Yannick Croissant)</li>\n<li>Iterator: use estraverse in tree-iterator. (mdevils)</li>\n<li><p>CLI: Move configuration override to node-configuration (Mike Sherov)</p>\n</li>\n<li><p>Docs: small correction to contributing guide (Oleg Gaidarenko)</p>\n</li>\n<li>Docs: fixed incorrect rule name in example (alawatthe)</li>\n<li>Docs: added keywords for Googleability (Devin Ekins)</li>\n<li>Docs: Correct documentation for disallowOperatorBeforeLineBreak (jdlrobson)</li>\n<li>Docs: Added quotes for uniformity (Callum Macrae)</li>\n<li>Docs: Typo fix (Alexander Sofin)</li>\n<li>Docs: fix urls to yandex codestyle (Andrey Morozov)</li>\n</ul>\n<h2 id=\"version-1-8-1\">Version 1.8.1</h2>\n<ul>\n<li>Assertions: always allow new lines in whitespaceBetween (Henry Zhu)</li>\n<li>Tests: reorganization, full coverage for JsFile (mdevils)</li>\n</ul>\n<h2 id=\"version-1-8-0\">Version 1.8.0</h2>\n<ul>\n<li>Preset: Grunt (Joel Kemp)</li>\n<li><p>Preset: remove &quot;disallowMultipleLineBreaks&quot; rule from crockford preset (Oleg Gaidarenko)</p>\n</li>\n<li><p>New Rules: disallowOperatorBeforeLineBreak (jdlrobson)</p>\n</li>\n<li>New Rules: (require | disallow)PaddingNewlinesBeforeKeywords (Anton Vishnyak)</li>\n<li>New Rules: disallowSpaceBeforeKeywords (Bryan Donovan)</li>\n<li><p>New Rules: requireSpaceBeforeKeywords (Bryan Donovan)</p>\n</li>\n<li><p>Parsing: Ability to specify a custom esprima version via CLI or config (Konstantin Tarkus)</p>\n</li>\n<li>Errors: Support a filter to control which errors are reported (Joel Kemp)</li>\n<li>Assertions: better rule error reporting. (mdevils)</li>\n<li><p>Better configuration, plugin support (mdevils)</p>\n</li>\n<li><p>disallowDanglingUnderscores: Support an array of additional exceptions (Henry Zhu)</p>\n</li>\n<li>requireTrailingComma: add option ignoreSingleLine (eltacodeldiablo)</li>\n<li>StringChecker: unsupported rules shown as style errors and not thrown exceptions (Joel Kemp)</li>\n<li>Iterate over &quot;export&quot; statement of ES6 (Oleg Gaidarenko)</li>\n<li>disallowMultipleVarDecl: add exception for undefined variable declarations (Henry Zhu)</li>\n<li>disallowDanglingUnderscores: add &quot;super_&quot; to allowed identifier list (Markus Dolic)</li>\n<li>disallowSpacesInAnonymousFunctionExpression: set correct error pointer (Oleg Gaidarenko)</li>\n<li><p>requireSpaceAfterLineComment: add &quot;except&quot; option (Alexej Yaroshevich)</p>\n</li>\n<li><p>validateParameterSeparator: fix for multiple spaces between parameters (Henry Zhu)</p>\n</li>\n<li>Added test and patch for <code>finally</code> as a spaced keyword (Todd Wolfson)</li>\n<li>requireCapitalizedComments: Better support for multi-line comments (indexzero)</li>\n<li>disallowSpaceBeforeKeywords: Fix assertion typo (Jeremy Fleischman)</li>\n<li>Errors: Simplify rules debugging and prevent crashes in error reporters (Alexej Yaroshevich)</li>\n<li><p>Correct error message for &quot;requireSpaceAfterKeywords&quot; rule (Bryan Donovan)</p>\n</li>\n<li><p>Docs: Fix Yandex codestyle link (Garmash Nikolay)</p>\n</li>\n<li>Docs: Added clarification of tokens in disallowSpacesInConditionalExpression (indexzero)</li>\n<li>Docs: add twitter and mailling list links (Oleg Gaidarenko)</li>\n<li>Docs: add more specific cases for function spaces rules (Henry Zhu)</li>\n<li>Docs: make indentation to be consistent at 4 spaces (Henry Zhu)</li>\n<li>Docs: Correct docs for requireAnonymousFunctions rule (Oleg Gaidarenko)</li>\n<li>Docs: Clarify &quot;config&quot; option (MaximAL)</li>\n<li>Docs: Add Plugins section (Alexej Yaroshevich)</li>\n</ul>\n<h2 id=\"version-1-7-3\">Version 1.7.3</h2>\n<ul>\n<li>Parsing: Use the harmony parser via the esnext flag in the config (Joel Kemp)</li>\n<li>validateIndentation: handle breakless case statements (Mike Sherov)</li>\n</ul>\n<h2 id=\"version-1-7-2\">Version 1.7.2</h2>\n<ul>\n<li>validateIndentation: fix return in switch failure (Mike Sherov)</li>\n<li>Cast StringChecker maxErrors property to Number the first time (Florian Fesseler)</li>\n<li>Fix format of --esnext and --max-errors in README (Joe Lencioni)</li>\n</ul>\n<h2 id=\"version-1-7-1\">Version 1.7.1</h2>\n<ul>\n<li>validateIndentation: fix empty multiline function body regression (Mike Sherov)</li>\n</ul>\n<h2 id=\"version-1-7-0\">Version 1.7.0</h2>\n<ul>\n<li>validateJSDoc: Deprecate rule (Joel Kemp)</li>\n<li>Updated google preset (Richard Poole)</li>\n<li><p>Add &quot;requireSpaceBeforeBlockStatements&quot; rule into the jquery preset (Oleg Gaidarenko)</p>\n</li>\n<li><p>CLI: Support --esnext to Parse ES6. (Robert Jackson)</p>\n</li>\n<li><p>CLI: Support a --max-errors option to limit the number of reported errors (mdevils)</p>\n</li>\n<li><p>New Rules: (require|disallow)CapitalizedComments (Joel Kemp)</p>\n</li>\n<li>New Rules: (require|disallow)SpacesInCallExpression (Mathieu Schroeter)</li>\n<li>New Rules: (disallow|require)FunctionDeclarations (Nikhil Benesch)</li>\n<li><p>New Rules: (require|disallow)PaddingNewLinesInObjects (Valentin Agachi)</p>\n</li>\n<li><p>Implement &quot;only&quot; for parens rule (Oleg Gaidarenko)</p>\n</li>\n<li>Simplify &quot;allButNested&quot; option for spaces rule (Oleg Gaidarenko)</li>\n<li>Implement &quot;except&quot; option for spaces rule (Oleg Gaidarenko)</li>\n<li><p>disallowMultipleVarDecl: Strict mode to disallow for statement exception (Joel Kemp)</p>\n</li>\n<li><p>disallowSpaceBeforeObjectKeys: fix parenthesised property value (Jindrich Besta)</p>\n</li>\n<li>requireSpaceBeforeObjectValues: fix parenthesised property value (Jindrich Besta)</li>\n<li>validateIndentation: Allow non-indented &quot;break&quot; in &quot;switch&quot; statement (kevin.destrem)</li>\n<li>ValidateIndentation: remove array and object indentation validation (Mike Sherov)</li>\n<li>validateIndentation: Allow the &quot;if&quot; test to be nested. (Jesper Birkestrøm)</li>\n<li>ValidateIndentation: Relax indentation rules for function expressions. (Mike Sherov)</li>\n<li>requireCurlyBraces: support the with statement (Joel Kemp)</li>\n<li>Fix invalid result of findXxxxToken methods when value is provided (Romain Guerin)</li>\n<li><p>requireSpaceAfterLineComment: skips msjsdoc comments (Alexej Yaroshevich)</p>\n</li>\n<li><p>Docs: add a table of contents to README (Henry Zhu)</p>\n</li>\n<li>Docs: Make version numbers real markdown headers (Alexander Artemenko)</li>\n</ul>\n<h2 id=\"version-1-6-2\">Version 1.6.2</h2>\n<ul>\n<li>Fix disallowMultipleLineBreaks with shebang line (Nicolas Gallagher)</li>\n<li>Improve validateParameterSeparator rule (David Chambers)</li>\n<li>Add rule for parameter separation validation (James Allardice)</li>\n<li>Add new rules for object values (Vivien TINTILLIER)</li>\n<li>Docs: add intellij plugin to friendly packages (idok)</li>\n<li>Support predefined values for another three rules (Joel Kemp)</li>\n</ul>\n<h2 id=\"version-1-6-1\">Version 1.6.1</h2>\n<ul>\n<li>Airbnb preset (Joel Kemp)</li>\n<li>Improve crockford preset (Vivien TINTILLIER)</li>\n<li>Avoid node.js 0.10.x exit code bug for MS Windows (Taku Watabe)</li>\n<li>Docs: Update packages and extensions sections with new URLs. (Mike Sherov)</li>\n</ul>\n<h2 id=\"version-1-6-0\">Version 1.6.0</h2>\n<ul>\n<li>Errors: ability to suppress errors via inline comments. (Mike Sherov)</li>\n<li>Fix Anonymous Functions in google preset (Ayoub Kaanich)</li>\n<li>Enhance google&#39;s preset (Joel Kemp)</li>\n<li>Add &quot;iterateTokenByValue&quot; method (Oleg Gaidarenko)</li>\n<li>Node -&gt; Tokens navigation, token list navigation (Marat Dulin)</li>\n<li>Do not strip json config from comments (Oleg Gaidarenko)</li>\n<li>maximumLineLength should not be destructive (Oleg Gaidarenko)</li>\n<li>Use tilde for package definition (Jordan Harband)</li>\n<li>Improve stdin support (Joel Kemp)</li>\n<li>Use correct logic for piped input (Joel Kemp)</li>\n<li>Properly concatenate large files read from stdin (Nikhil Benesch)</li>\n<li>Add link to the Atom editor plugin for JSCS (Addy Osmani)</li>\n<li>Setting default tree to empty object (Bryan Donovan)</li>\n</ul>\n<h2 id=\"version-1-5-9\">Version 1.5.9</h2>\n<ul>\n<li>Binary Rules: Remove colon check from all binary rules (Oleg Gaidarenko)</li>\n<li>Presets: Add Mr. Doob&#39;s Code Style (MDCS) (gero3)</li>\n<li>Presets: Add Crockford (Timo Tijhof)</li>\n<li>Google Preset: Add missing constraints (Turadg Aleahmad)</li>\n<li>Yandex Preset: Remove repeated rule in yandex preset (Benjamin Tamborine)</li>\n<li>Yandex Preset: updated to be more accurate (ikokostya)</li>\n<li>New Rules: (require|disallow)NewlineBeforeBlockStatements (cipiripper)</li>\n<li>New Rules: (require|disallow)AnonymousFunctions (Rachel White)</li>\n<li>New Rules: (disallow|require)SpacesInFunction (Mike Sherov)</li>\n<li>CLI: Accepts piped input from stdin (Joel Kemp)</li>\n<li>CLI: Add --verbose option that adds rule names to error output. (Mike Sherov)</li>\n<li>Errors: report Esprima parse errors as rule violations. (Mike Sherov)</li>\n<li>disallowMultipleLineBreaks: fix issues with shebang line (Bryan Donovan)</li>\n<li>spacesInFunctionExpressions: ignore function declarations. (Mike Sherov)</li>\n</ul>\n<h2 id=\"version-1-5-8\">Version 1.5.8</h2>\n<ul>\n<li>Errors: include which rule triggered the error in the error output (gero3)</li>\n<li>requireTrailingComma: Allow single property objects  / arrays to ignore the rule. (Joel Kemp)</li>\n<li>requireTrailingComma: Avoids false positives from non object/array literal definitions. (Joel Kemp)</li>\n<li>validateIndentation: fix indentation for non-block <code>if</code> that has block <code>else</code>. (Mike Sherov)</li>\n<li>maximumLineLength: Document the required and default values. (Joel Kemp)</li>\n</ul>\n<h2 id=\"version-1-5-7\">Version 1.5.7</h2>\n<ul>\n<li>Exclude colon from binary rule of yandex preset (Oleg Gaidarenko)</li>\n<li>wikimedia: Add &#39;case&#39; and &#39;typeof&#39; to requireSpaceAfterKeywords (Timo Tijhof)</li>\n<li>Correct deal with exclusion and extensions (Oleg Gaidarenko)</li>\n<li>disallowPaddingNewlinesInBlocks: fix false negatives with newline after closing curly. (Iskren Chernev)</li>\n<li>Include jscs-browser file to npm package (Oleg Gaidarenko)</li>\n<li>Clarify docs of use of jscs-browser.js (Oleg Gaidarenko)</li>\n</ul>\n<h2 id=\"version-1-5-6\">Version 1.5.6</h2>\n<ul>\n<li>Correct prebublish script (Oleg Gaidarenko)</li>\n</ul>\n<h2 id=\"version-1-5-5\">Version 1.5.5</h2>\n<ul>\n<li>Add allowUrlComments to yandex preset (ikokostya)</li>\n<li>Improve requireMultipleVarDecl rule (Oleg Gaidarenko)</li>\n<li>Improve fileExtension option (Oleg Gaidarenko)</li>\n<li>Perform file check by direct reference (Oleg Gaidarenko)</li>\n<li>Comma not on the same line with the first operand (Oleg Gaidarenko)</li>\n<li>Simplify doc instruction a bit (Oleg Gaidarenko)</li>\n<li>Generate &quot;jscs-browser.js&quot; only during publishing (Oleg Gaidarenko)</li>\n<li>Fix tests for requireSpaceBeforeBinaryOperators (lemmy)</li>\n</ul>\n<h2 id=\"version-1-5-4\">Version 1.5.4</h2>\n<ul>\n<li>Fix crash caused by multiline case statements that fall through for validateIndentation rule (Mike Sherov)</li>\n</ul>\n<h2 id=\"version-1-5-3\">Version 1.5.3</h2>\n<ul>\n<li>Add missing rules in jQuery preset (Oleg Gaidarenko)</li>\n<li>Exclude comma operator from requireSpaceBeforeBinaryOperators rule (Oleg Gaidarenko)</li>\n<li>Ignore ios instruments style imports (@sebv)</li>\n<li>Various doc fixes (Christian Vuerings, Timo Tijhof, Oleg Gaidarenko)</li>\n</ul>\n<h2 id=\"version-1-5-2\">Version 1.5.2</h2>\n<ul>\n<li>Improve binary rule (Oleg Gaidarenko)</li>\n<li>Fix recursive descend, #445 (Oleg Gaidarenko)</li>\n</ul>\n<h2 id=\"version-1-5-1\">Version 1.5.1</h2>\n<ul>\n<li>Version bump to address incorrectly published docs (Mike Sherov)</li>\n</ul>\n<h2 id=\"version-1-5-0\">Version 1.5.0</h2>\n<ul>\n<li>Sticked Operators Rules: Deprecate in favor of more specific rules (Mike Sherov)</li>\n<li>Update google preset (Oleg Gaidarenko)</li>\n<li>Update jQuery preset (Mike Sherov)</li>\n<li>Implement wikimedia preset (Timo Tijhof)</li>\n<li>Impelement yandex preset (Alexander Tarmolov)</li>\n<li>Implement fileExtensions option (Joel Brandt)</li>\n<li>Implement requireYodaConditions rule (Oleg Gaidarenko)</li>\n<li>Disallow Space After Line Comment: New Rule (Ben Bernard)</li>\n<li>Require Space After Line Comment: New Rule (Ben Bernard)</li>\n<li>Implement requireSpacesInsideParentheses (Mikko Rantanen)</li>\n<li>MaximumLineLength: add ignoreUrlComments option which ignore comments with long urls. (Mike Sherov)</li>\n<li>requireCamelCaseOrUpperCaseIdentifiers: add option to ignore object properties. (Mike Sherov)</li>\n<li>MaximumLineLength: provide relaxing option for comments and/or regular expression literals. (Mike Sherov)</li>\n<li>disallowPaddingNewlinesInBlocks: Count comments as valid tokens. (Joshua Koo)</li>\n<li>Add new option to maximumLineLength rule (Oleg Gaidarenko)</li>\n<li>Function expressions ignore getters and setters (Ruben Tytgat)</li>\n<li>Add &quot;true&quot; as a possible value for binary/unary rules (Oleg Gaidarenko)</li>\n<li>Improve disallowSpacesInsideObjectBrackets (Oleg Gaidarenko)</li>\n<li>Improve disallowSpacesInsideArrayBrackets (Oleg Gaidarenko)</li>\n<li>Improve disallowSpacesInsideArrayBrackets rule (Oleg Gaidarenko)</li>\n<li>Improve disallowSpacesInsideObjectBrackets rule (Oleg Gaidarenko)</li>\n<li>Improve disallowQuotedKeysInObjects rule (Oleg Gaidarenko)</li>\n<li>Improve requireSpacesInsideObjectBrackets rule (Oleg Gaidarenko)</li>\n<li>Improve handling comments for *SpaceAfterKeywords (Oleg Gaidarenko)</li>\n<li>Improve requireOperatorBeforeLineBreak (Oleg Gaidarenko)</li>\n<li>Improve defintions of operators in utils module (Oleg Gaidarenko)</li>\n<li>Improve requireSpaceBeforePostfixUnaryOperators (Oleg Gaidarenko)</li>\n<li>Improve disallowSpaceBeforePostfixUnaryOperators (Oleg Gaidarenko)</li>\n<li>Improve requireSpaceAfterPrefixUnaryOperators (Oleg Gaidarenko)</li>\n<li>Improve disallowSpaceAfterPrefixUnaryOperators (Oleg Gaidarenko)</li>\n<li>Improve disallowSpaceAfterBinaryOperators rule (Oleg Gaidarenko)</li>\n<li>Improve requireSpaceBeforeBinaryOperators rule (Oleg Gaidarenko)</li>\n<li>Improve disallowSpaceBeforeBinaryOperators rule (Oleg Gaidarenko)</li>\n<li>Improve requireSpaceAfterBinaryOperators rule (Oleg Gaidarenko)</li>\n<li>Improve requireOperatorBeforeLineBreak rule (Oleg Gaidarenko)</li>\n<li>Improve requireSpaceAfterPrefixUnaryOperators rule (Oleg Gaidarenko)</li>\n<li>Improve requireOperatorBeforeLineBreak rule (Oleg Gaidarenko)</li>\n<li>Differentiate errors for requireSpaceAfterKeywords (Oleg Gaidarenko)</li>\n<li>Modify lint options of jshint and jscs (Oleg Gaidarenko)</li>\n<li>Test Cleanup (Oleg Gaidarenko)</li>\n<li>Throw error if specified preset does not exist (Oleg Gaidarenko)</li>\n<li>utils: Remove duplicate &#39;+=&#39; from binaryOperators (Timo Tijhof)</li>\n<li>Various readme fixes (Syoichi Tsuyuhara)</li>\n<li>Provide friendly message for corrupted config (Oleg Gaidarenko)</li>\n<li>Use new Vow API (Jordan Harband)</li>\n<li>Update Mocha (Jordan Harband)</li>\n<li>Update dependencies (Jordan Harband)</li>\n<li>Various improvements to the utils module (Oleg Gaidarenko)</li>\n<li>&quot;null&quot; must be a quoted key in IE 6-8 (Jordan Harband)</li>\n<li>Change signature of findOperatorByRangeStart (Oleg Gaidarenko)</li>\n<li>Add isTokenParenthesis method to token helper (Oleg Gaidarenko)</li>\n<li>Improve getTokenByRangeStart method (Oleg Gaidarenko)</li>\n<li>Correct docs for requireSpacesInsideParentheses (Oleg Gaidarenko)</li>\n<li>readme: Clean up assignment operators (Timo Tijhof)</li>\n</ul>\n<h2 id=\"version-1-4-5\">Version 1.4.5</h2>\n<ul>\n<li>Hotfix: Fix binary rules for &quot;,&quot; and &quot;=&quot; operators (@markelog)</li>\n</ul>\n<h2 id=\"version-1-4-4\">Version 1.4.4</h2>\n<ul>\n<li>Improve <code>requireSpaceAfterBinaryOperators</code> rule (@markelog)</li>\n<li>Improve <code>disallowSpaceAfterBinaryOperators</code> rule (@markelog)</li>\n<li>Improve <code>requireSpaceBeforeBinaryOperators</code> rule (@markelog)</li>\n<li>Improve <code>disallowSpaceBeforeBinaryOperators</code> rule (@markelog)</li>\n<li>Update google preset (@markelog)</li>\n<li>Fixes <code>requirePaddingNewlinesInBlocks</code>: support multi-line padding (@zz85)</li>\n<li>Update error message when no config is found (@mikesherov)</li>\n<li>Rule <code>requireSpacesInConditionalExpression</code> (@mikesherov)</li>\n<li>Rule <code>disallowSpacesInConditionalExpression</code> (@mikesherov)</li>\n<li>Fixes for <code>validateIndentation</code> rule: fix more weird onevar constructs and associated indentation rules. (@mikesherov)</li>\n<li>Fixes for <code>validateIndentation</code> rule: fix bug when IfStatement test contains a BlockStatement</li>\n</ul>\n<h2 id=\"version-1-4-3-\">Version 1.4.3:</h2>\n<ul>\n<li>Presets folder was missing in the package (@mdevils).</li>\n</ul>\n<h2 id=\"version-1-4-2-\">Version 1.4.2:</h2>\n<ul>\n<li>Rule <code>requireSpaceAfterKeywords</code>: do not fail on linebreaks (@mdevils).</li>\n</ul>\n<h2 id=\"version-1-4-1-\">Version 1.4.1:</h2>\n<ul>\n<li>Rule <code>disallowPaddingNewlinesInBlocks</code>: check for comments in the whitespace. Fixes #347 (@mikesherov).</li>\n<li>Introduce extensions section in README (@zxqfox)</li>\n<li>Fixes for <code>validateIndentation</code> rule: properly validate finally clauses. Fixes #311 (@mikesherov).</li>\n<li>Fixes for <code>validateIndentation</code> rule: tests for holes in array and more complex temporary fix for it (@zxqfox).</li>\n<li>Fixes for <code>validateIndentation</code> rule: allow for extra indents when first variable\nin a declaration is multi-line (@mikesherov).</li>\n<li>Fixes for <code>validateIndentation</code> rule: prevent false positive when array elements are\non same line as array opener, but array is not single line. Fixes #353 (@mikesherov)</li>\n<li>Restructuration of lib/test files (@markelog)</li>\n</ul>\n<h2 id=\"version-1-4-0-\">Version 1.4.0:</h2>\n<ul>\n<li>Dropped <code>node.js</code> 0.8 support.</li>\n<li>Update all dependencies to their latest versions except <code>vow</code>/<code>vow-fs</code> (@XhmikosR).</li>\n<li>Add dependency status badges (@XhmikosR).</li>\n<li>Advanced search for the configuration files (@markelog).</li>\n<li>Improve <code>requireSpaceAfterKeywords</code> rule: trigger error if there is more then two spaces (@markelog).</li>\n<li>Rule <code>spaceAfterKeywords</code>: fix up funarg issue (@markelog).</li>\n<li>Make <code>requireMultipleVarDecl</code> rule more like onevar (@markelog).</li>\n<li>Allow comments in parentheses for rule <code>disallowSpacesInsideParentheses</code> (@Famlam).</li>\n<li>Extract own settings into google preset (@jzaefferer).</li>\n<li>Rule <code>disallowTrailingComma</code> (@rxin).</li>\n<li>Rule <code>requireTrailingComma</code> (@rxin).</li>\n<li>Rule <code>disallowSpaceBeforeBlockStatements</code> (@rxin).</li>\n<li>Rule <code>requireSpaceBeforeBlockStatements</code> (@rxin).</li>\n<li>Rule <code>requireBlocksOnNewline</code> (@mikesherov).</li>\n<li>Rule <code>requirePaddingNewlinesInBlock</code> (@mikesherov).</li>\n<li>Rule <code>disallowPaddingNewlinesInBlock</code> (@mikesherov).</li>\n</ul>\n<h2 id=\"version-1-3-0-\">Version 1.3.0:</h2>\n<ul>\n<li>New JSCS config format: <code>.jscsrc</code>. JSON-file with comments.</li>\n<li>Rule <code>requireBlocksOnNewline</code> (@Famlam).</li>\n<li>Rule <code>requireSpacesInAnonymousFunctionExpression</code> (@jamesallardice).</li>\n<li>Rule <code>disallowSpacesInAnonymousFunctionExpression</code> (@jamesallardice).</li>\n<li>Rule <code>requireSpacesInNamedFunctionExpression</code> (@jamesallardice).</li>\n<li>Rule <code>disallowSpacesInNamedFunctionExpression</code> (@jamesallardice).</li>\n<li>Custom path to reporter (@Adeel).</li>\n<li>Option <code>escape</code> for rule <code>validateQuote</code> (@mikesherov).</li>\n<li>Fixed <code>validateIndentation</code> rule (@mikesherov).</li>\n<li>Fixed <code>excludeFiles</code> option (@markelog).</li>\n<li>CLI/Reporter fixes (@markelog, @am11).</li>\n<li>Documentation fixes (@tenorok).</li>\n<li>Minor tweaks (@XhmikosR).</li>\n</ul>\n<h2 id=\"version-1-2-4-\">Version 1.2.4:</h2>\n<ul>\n<li>Fixed typos.</li>\n<li>Fixed <code>validateIndentation</code> rule.</li>\n<li>Sorting errors.</li>\n</ul>\n<h2 id=\"version-1-2-3-\">Version 1.2.3:</h2>\n<ul>\n<li>New reporter: <code>inline</code> (@clochix).</li>\n<li>Fixed for rule <code>requireDotNotation</code> (@ikokostya).</li>\n</ul>\n<h2 id=\"version-1-2-2-\">Version 1.2.2:</h2>\n<ul>\n<li>Fixed case with number for <code>requireDotNotation</code> rule (@andrewblond).</li>\n</ul>\n<h2 id=\"version-1-2-1-\">Version 1.2.1:</h2>\n<ul>\n<li>Fix in error message for rule <code>maximumLineLength</code> (@pdehaan).</li>\n</ul>\n<h2 id=\"version-1-2-0-\">Version 1.2.0:</h2>\n<ul>\n<li>Rule <code>requireCommaBeforeLineBreak</code> (@mikesherov).</li>\n<li>Rule <code>disallowCommaBeforeLineBreak</code> (@mikesherov).</li>\n<li>Rule <code>requireDotNotation</code> (@mikesherov).</li>\n<li>Rule <code>requireCamelCaseOrUpperCaseIdentifiers</code> (@mikesherov).</li>\n<li>Rule <code>disallowEmptyBlocks</code> (@mikesherov).</li>\n<li>Rule <code>validateQuoteMarks</code> (@mikesherov).</li>\n<li>Rule <code>requireParenthesesAroundIIFE</code> (@mikesherov).</li>\n<li>Rule <code>requireOperatorBeforeLineBreak</code> (@mikesherov).</li>\n<li>Rule <code>requireCapitalizedConstructors</code> (@mikesherov).</li>\n<li>Rule <code>disallowDanglingUnderscores</code> (@mikesherov).</li>\n<li>Rule <code>disallowTrailingWhitespace</code> (@mikesherov).</li>\n<li>Сurly brace checking for &#39;case&#39; and &#39;default&#39; statements (@mikesherov).</li>\n<li>Rule <code>maximumLineLength</code> (@mikesherov).</li>\n<li>Rule <code>disallowMixedSpacesAndTabs</code> (@mikesherov).</li>\n<li>Rule <code>validateIndentation</code> (@mikesherov).</li>\n<li>README: Reformat to use headings (@nschonni).</li>\n<li>ES3 future reserved words added to tokenIsReservedWord() (@maxatwork).</li>\n<li>Fixes for: requireSpaceBeforePostfixUnaryOperators, requireSpaceAfterPrefixUnaryOperators,\ndisallowSpaceBeforePostfixUnaryOperators, disallowSpaceAfterPrefixUnaryOperators (@mdevils).</li>\n<li>Rule <code>disallowMultipleLineStrings</code> (@mikesherov).</li>\n</ul>\n<h2 id=\"version-1-0-15-\">Version 1.0.15:</h2>\n<ul>\n<li>junit reporter (@markelog).</li>\n</ul>\n<h2 id=\"version-1-0-14-\">Version 1.0.14:</h2>\n<ul>\n<li>Option <code>additionalRules</code> (@markelog).</li>\n<li>disallowQuotedKeysInObjects: Exclusion array (@nschonni).</li>\n</ul>\n<h2 id=\"version-1-0-13-\">Version 1.0.13:</h2>\n<ul>\n<li>Option <code>validateLineBreaks</code> (@twoRoger).</li>\n</ul>\n<h2 id=\"version-1-0-12-\">Version 1.0.12:</h2>\n<ul>\n<li>Fixes for jsdoc params.</li>\n</ul>\n<h2 id=\"version-1-0-11-\">Version 1.0.11:</h2>\n<ul>\n<li>Prefix unary rules: <code>disallowSpaceAfterPrefixUnaryOperators</code>, <code>requireSpaceAfterPrefixUnaryOperators</code> (@mishaberezin).</li>\n<li>Postfix unary rules: <code>disallowSpaceBeforePostfixUnaryOperators</code>, <code>requireSpaceBeforePostfixUnaryOperators</code> (@mishaberezin).</li>\n</ul>\n<h2 id=\"version-1-0-10-\">Version 1.0.10:</h2>\n<ul>\n<li>Reporter support — <code>console</code>, <code>text</code>, <code>checkstyle</code>.</li>\n</ul>\n<h2 id=\"version-1-0-9-\">Version 1.0.9:</h2>\n<ul>\n<li>Browser-compatible version.</li>\n<li>Fix for <code>disallowMultipleLineBreaks</code> option to report only once per each sequence of line breaks.</li>\n<li>Fix for <code>disallowMultipleLineBreaks</code> option to work properly when CRLF line break is used.</li>\n</ul>\n<h2 id=\"version-1-0-8-\">Version 1.0.8:</h2>\n<ul>\n<li>Fixes for <code>safeContextKeyword</code>.</li>\n</ul>\n<h2 id=\"version-1-0-7-\">Version 1.0.7:</h2>\n<ul>\n<li>Disallow spaces inside parentheses (@ignovak).</li>\n</ul>\n<h2 id=\"version-1-0-6-\">Version 1.0.6:</h2>\n<ul>\n<li>Convert tabs into spaces (@markelog).</li>\n<li>Report illegal space between nested closing curly braces (@twoRoger).</li>\n<li>Use absolute path to config when specified (@vtambourine).</li>\n<li>safeContextKeyword option to check &quot;var that = this&quot; expressions (@doochik).</li>\n</ul>\n<h2 id=\"version-1-0-4-1-0-5-\">Version 1.0.4-1.0.5:</h2>\n<ul>\n<li>Fixed mistype <code>disallowMulipleVarDecl</code> -&gt; <code>disallowMultipleVarDecl</code>.</li>\n<li>Fixed error for invalid symlink checking.</li>\n</ul>\n<h2 id=\"version-1-0-3-\">Version 1.0.3:</h2>\n<ul>\n<li>Changed behaviour for <code>disallowMultipleVarDecl</code> options. Now accepts multiple var decl in <code>for</code> decl.</li>\n</ul>\n<h2 id=\"version-1-0-2-\">Version 1.0.2:</h2>\n<ul>\n<li>Option <code>requireSpacesInsideArrayBrackets</code> (@mishanga).</li>\n</ul>\n<h2 id=\"version-1-0-1-\">Version 1.0.1:</h2>\n<ul>\n<li>Not reporting about extra quotes for zero-starting numbers in <code>disallowQuotedKeysInObjects</code>.</li>\n</ul>\n<h2 id=\"version-1-0-0-\">Version 1.0.0:</h2>\n<ul>\n<li>Camel-case configuration options.</li>\n<li>Option <code>requireAlignedObjectValues</code>.</li>\n<li>Option <code>requireSpaceAfterObjectKeys</code>.</li>\n<li>JSDoc for core functions and classes.</li>\n<li>Fix error position for disallowSpacesInsideObjectBrackets and disallowSpacesInsideArrayBrackets.</li>\n</ul>\n<h2 id=\"version-0-0-12-\">Version 0.0.12:</h2>\n<ul>\n<li>Fix in <code>disallowSpaceAfterObjectKeys</code> location reporting.</li>\n</ul>\n<h2 id=\"version-0-0-11-\">Version 0.0.11:</h2>\n<ul>\n<li>Option <code>disallowSpaceAfterObjectKeys</code>.</li>\n<li>Option <code>disallowSpacesInsideArrayBrackets</code>.</li>\n<li>Do not automatically exclude hidden files.</li>\n</ul>\n<h2 id=\"version-0-0-10-\">Version 0.0.10:</h2>\n<ul>\n<li>Fix in <code>disallowQuotedKeysInObjects</code>.</li>\n</ul>\n<h2 id=\"version-0-0-9-\">Version 0.0.9:</h2>\n<ul>\n<li>Fix in <code>disallowQuotedKeysInObjects</code>.</li>\n</ul>\n<h2 id=\"version-0-0-8-\">Version 0.0.8:</h2>\n<ul>\n<li>Fix in <code>requireSpacesInsideObjectBrackets</code>.</li>\n<li>Option <code>disallowQuotedKeysInObjects</code>.</li>\n</ul>\n<h2 id=\"version-0-0-7-\">Version 0.0.7:</h2>\n<ul>\n<li>Option <code>requireSpacesInsideObjectBrackets</code>.</li>\n<li>Option <code>disallowSpacesInsideObjectBrackets</code>.</li>\n</ul>\n<h2 id=\"version-0-0-6-\">Version 0.0.6:</h2>\n<ul>\n<li>Fixes incorrent checkPath behavior.</li>\n</ul>\n<h2 id=\"version-0-0-5-\">Version 0.0.5:</h2>\n<ul>\n<li>.jshintrc config.</li>\n<li>Error message format fixes.</li>\n</ul>\n<h2 id=\"version-0-0-4-\">Version 0.0.4:</h2>\n<ul>\n<li>Option <code>disallowYodaConditions</code>.</li>\n<li>Option <code>requireMultipleVarDecl</code>.</li>\n</ul>\n<h2 id=\"version-0-0-3-\">Version 0.0.3:</h2>\n<ul>\n<li>Option <code>excludeFiles</code>, which accepts patterns.</li>\n</ul>\n<h2 id=\"version-0-0-2-\">Version 0.0.2:</h2>\n<ul>\n<li>Link to parent nodes.</li>\n</ul>\n<h2 id=\"version-0-0-1-\">Version 0.0.1:</h2>\n<ul>\n<li>Initial implementation.</li>\n</ul>\n"}